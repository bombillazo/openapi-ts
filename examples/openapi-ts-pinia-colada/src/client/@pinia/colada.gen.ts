// This file is auto-generated by @hey-api/openapi-ts

import {
  addPet,
  createUser,
  createUsersWithListInput,
  deleteOrder,
  deletePet,
  deleteUser,
  findPetsByStatus,
  findPetsByTags,
  getInventory,
  getOrderById,
  getPetById,
  getUserByName,
  loginUser,
  logoutUser,
  type Options,
  placeOrder,
  updatePet,
  updatePetWithForm,
  updateUser,
  uploadFile
} from '../sdk.gen'
import type {
  AddPetData,
  CreateUserData,
  CreateUsersWithListInputData,
  DeleteOrderData,
  DeletePetData,
  DeleteUserData,
  FindPetsByStatusData,
  FindPetsByTagsData,
  GetInventoryData,
  GetOrderByIdData,
  GetPetByIdData,
  GetUserByNameData,
  LoginUserData,
  LogoutUserData,
  PlaceOrderData,
  UpdatePetData,
  UpdatePetWithFormData,
  UpdateUserData,
  UploadFileData
} from '../types.gen'

/**
 * Add a new pet to the store.
 * Add a new pet to the store.
 */
export const addPetMutation = () => ({
  mutation: async (options: Options<AddPetData>) => {
    const { data } = await addPet(options)
    return data
  }
})

/**
 * Update an existing pet.
 * Update an existing pet by Id.
 */
export const updatePetMutation = () => ({
  mutation: async (options: Options<UpdatePetData>) => {
    const { data } = await updatePet(options)
    return data
  }
})

/**
 * Finds Pets by status.
 * Multiple status values can be provided with comma separated strings.
 */
export const findPetsByStatusQuery = (options: Options<FindPetsByStatusData>) => ({
  key: ['findPetsByStatus', options?.path],
  query: async (context: { signal: AbortSignal }) => {
    const { data } = await findPetsByStatus({
      ...options,
      signal: context.signal,
      throwOnError: true
    })
    return data
  }
})

/**
 * Finds Pets by tags.
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 */
export const findPetsByTagsQuery = (options: Options<FindPetsByTagsData>) => ({
  key: ['findPetsByTags', options?.path],
  query: async (context: { signal: AbortSignal }) => {
    const { data } = await findPetsByTags({
      ...options,
      signal: context.signal,
      throwOnError: true
    })
    return data
  }
})

/**
 * Deletes a pet.
 * Delete a pet.
 */
export const deletePetMutation = () => ({
  mutation: async (options: Options<DeletePetData>) => {
    const { data } = await deletePet(options)
    return data
  }
})

/**
 * Find pet by ID.
 * Returns a single pet.
 */
export const getPetByIdQuery = (options: Options<GetPetByIdData>) => ({
  key: ['getPetById', options?.path],
  query: async (context: { signal: AbortSignal }) => {
    const { data } = await getPetById({
      ...options,
      signal: context.signal,
      throwOnError: true
    })
    return data
  }
})

/**
 * Updates a pet in the store with form data.
 * Updates a pet resource based on the form data.
 */
export const updatePetWithFormMutation = () => ({
  mutation: async (options: Options<UpdatePetWithFormData>) => {
    const { data } = await updatePetWithForm(options)
    return data
  }
})

/**
 * Uploads an image.
 * Upload image of the pet.
 */
export const uploadFileMutation = () => ({
  mutation: async (options: Options<UploadFileData>) => {
    const { data } = await uploadFile(options)
    return data
  }
})

/**
 * Returns pet inventories by status.
 * Returns a map of status codes to quantities.
 */
export const getInventoryQuery = (options?: Options<GetInventoryData>) => ({
  key: ['getInventory', options?.path],
  query: async (context: { signal: AbortSignal }) => {
    const { data } = await getInventory({
      ...options,
      signal: context.signal,
      throwOnError: true
    })
    return data
  }
})

/**
 * Place an order for a pet.
 * Place a new order in the store.
 */
export const placeOrderMutation = () => ({
  mutation: async (options: Options<PlaceOrderData>) => {
    const { data } = await placeOrder(options)
    return data
  }
})

/**
 * Delete purchase order by identifier.
 * For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.
 */
export const deleteOrderMutation = () => ({
  mutation: async (options: Options<DeleteOrderData>) => {
    const { data } = await deleteOrder(options)
    return data
  }
})

/**
 * Find purchase order by ID.
 * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
 */
export const getOrderByIdQuery = (options: Options<GetOrderByIdData>) => ({
  key: ['getOrderById', options?.path],
  query: async (context: { signal: AbortSignal }) => {
    const { data } = await getOrderById({
      ...options,
      signal: context.signal,
      throwOnError: true
    })
    return data
  }
})

/**
 * Create user.
 * This can only be done by the logged in user.
 */
export const createUserMutation = () => ({
  mutation: async (options: Options<CreateUserData>) => {
    const { data } = await createUser(options)
    return data
  }
})

/**
 * Creates list of users with given input array.
 * Creates list of users with given input array.
 */
export const createUsersWithListInputMutation = () => ({
  mutation: async (options: Options<CreateUsersWithListInputData>) => {
    const { data } = await createUsersWithListInput(options)
    return data
  }
})

/**
 * Logs user into the system.
 * Log into the system.
 */
export const loginUserQuery = (options?: Options<LoginUserData>) => ({
  key: ['loginUser', options?.path],
  query: async (context: { signal: AbortSignal }) => {
    const { data } = await loginUser({
      ...options,
      signal: context.signal,
      throwOnError: true
    })
    return data
  }
})

/**
 * Logs out current logged in user session.
 * Log user out of the system.
 */
export const logoutUserQuery = (options?: Options<LogoutUserData>) => ({
  key: ['logoutUser', options?.path],
  query: async (context: { signal: AbortSignal }) => {
    const { data } = await logoutUser({
      ...options,
      signal: context.signal,
      throwOnError: true
    })
    return data
  }
})

/**
 * Delete user resource.
 * This can only be done by the logged in user.
 */
export const deleteUserMutation = () => ({
  mutation: async (options: Options<DeleteUserData>) => {
    const { data } = await deleteUser(options)
    return data
  }
})

/**
 * Get user by user name.
 * Get user detail based on username.
 */
export const getUserByNameQuery = (options: Options<GetUserByNameData>) => ({
  key: ['getUserByName', options?.path],
  query: async (context: { signal: AbortSignal }) => {
    const { data } = await getUserByName({
      ...options,
      signal: context.signal,
      throwOnError: true
    })
    return data
  }
})

/**
 * Update user resource.
 * This can only be done by the logged in user.
 */
export const updateUserMutation = () => ({
  mutation: async (options: Options<UpdateUserData>) => {
    const { data } = await updateUser(options)
    return data
  }
})
