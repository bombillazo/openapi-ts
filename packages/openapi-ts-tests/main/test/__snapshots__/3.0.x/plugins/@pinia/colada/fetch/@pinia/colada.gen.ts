// This file is auto-generated by @hey-api/openapi-ts

import { type Options, export_, patchApiVbyApiVersionNoTag, import_, fooWow, apiVVersionODataControllerCount, getApiVbyApiVersionSimpleOperation, deleteCallWithoutParametersAndResponse, getCallWithoutParametersAndResponse, patchCallWithoutParametersAndResponse, postCallWithoutParametersAndResponse, putCallWithoutParametersAndResponse, deleteFoo, callWithDescriptions, deprecatedCall, callWithParameters, callWithWeirdParameterNames, getCallWithOptionalParam, postCallWithOptionalParam, postApiVbyApiVersionRequestBody, postApiVbyApiVersionFormData, callWithDefaultParameters, callWithDefaultOptionalParameters, callToTestOrderOfParams, duplicateName, duplicateName2, duplicateName3, duplicateName4, callWithNoContentResponse, callWithResponseAndNoContentResponse, dummyA, dummyB, callWithResponse, callWithDuplicateResponses, callWithResponses, collectionFormat, types, uploadFile, fileResponse, complexTypes, multipartResponse, multipartRequest, complexParams, callWithResultFromHeader, testErrorCode, nonAsciiæøåÆøÅöôêÊ字符串, putWithFormUrlEncoded } from '../sdk.gen';
import type { _JSONValue, UseQueryOptions, UseMutationOptions } from '@pinia/colada';
import type { ExportData, PatchApiVbyApiVersionNoTagData, ImportData, ImportResponse, FooWowData, ApiVVersionODataControllerCountData, ApiVVersionODataControllerCountResponse, GetApiVbyApiVersionSimpleOperationData, GetApiVbyApiVersionSimpleOperationError, GetApiVbyApiVersionSimpleOperationResponse, DeleteCallWithoutParametersAndResponseData, GetCallWithoutParametersAndResponseData, PatchCallWithoutParametersAndResponseData, PostCallWithoutParametersAndResponseData, PutCallWithoutParametersAndResponseData, DeleteFooData3, CallWithDescriptionsData, DeprecatedCallData, CallWithParametersData, CallWithWeirdParameterNamesData, GetCallWithOptionalParamData, PostCallWithOptionalParamData, PostCallWithOptionalParamResponse, PostApiVbyApiVersionRequestBodyData, PostApiVbyApiVersionFormDataData, CallWithDefaultParametersData, CallWithDefaultOptionalParametersData, CallToTestOrderOfParamsData, DuplicateNameData, DuplicateName2Data, DuplicateName3Data, DuplicateName4Data, CallWithNoContentResponseData, CallWithNoContentResponseResponse, CallWithResponseAndNoContentResponseData, CallWithResponseAndNoContentResponseResponse, DummyAData, DummyAResponse, DummyBData, DummyBResponse, CallWithResponseData, CallWithResponseResponse, CallWithDuplicateResponsesData, CallWithDuplicateResponsesError, CallWithDuplicateResponsesResponse, CallWithResponsesData, CallWithResponsesError, CallWithResponsesResponse, CollectionFormatData, TypesData, TypesResponse, UploadFileData, UploadFileResponse, FileResponseData, FileResponseResponse, ComplexTypesData, ComplexTypesResponse, MultipartResponseData, MultipartResponseResponse, MultipartRequestData, ComplexParamsData, ComplexParamsResponse, CallWithResultFromHeaderData, TestErrorCodeData, NonAsciiæøåÆøÅöôêÊ字符串Data, NonAsciiæøåÆøÅöôêÊ字符串Response, PutWithFormUrlEncodedData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'body' | 'path'> & {
        _id: string;
        baseUrl?: _JSONValue;
        headers?: _JSONValue;
        query?: _JSONValue;
        tags?: _JSONValue;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (tags) {
        params.tags = tags as unknown as undefined;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers as unknown as undefined;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query as unknown as undefined;
    }
    return [
        params
    ];
};

export const exportQueryKey = (options?: Options<ExportData>) => createQueryKey('export', options);

export const exportQuery = (options?: Options<ExportData>): UseQueryOptions<unknown, Error> => {
    return {
        key: exportQueryKey(options),
        query: async (context) => {
            const { data } = await export_({
                ...options,
                ...context,
                throwOnError: true
            });
            return data;
        }
    };
};

export const patchApiVbyApiVersionNoTagMutation = (options?: Options<PatchApiVbyApiVersionNoTagData>): UseMutationOptions<unknown, Options<PatchApiVbyApiVersionNoTagData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await patchApiVbyApiVersionNoTag({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const importMutation = (options: Options<ImportData>): UseMutationOptions<ImportResponse, Options<ImportData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await import_({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const fooWowMutation = (options?: Options<FooWowData>): UseMutationOptions<unknown, Options<FooWowData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await fooWow({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const apiVVersionODataControllerCountQueryKey = (options?: Options<ApiVVersionODataControllerCountData>) => createQueryKey('apiVVersionODataControllerCount', options);

export const apiVVersionODataControllerCountQuery = (options?: Options<ApiVVersionODataControllerCountData>): UseQueryOptions<ApiVVersionODataControllerCountResponse, Error> => {
    return {
        key: apiVVersionODataControllerCountQueryKey(options),
        query: async (context) => {
            const { data } = await apiVVersionODataControllerCount({
                ...options,
                ...context,
                throwOnError: true
            });
            return data;
        }
    };
};

export const getApiVbyApiVersionSimpleOperationQueryKey = (options: Options<GetApiVbyApiVersionSimpleOperationData>) => createQueryKey('getApiVbyApiVersionSimpleOperation', options);

export const getApiVbyApiVersionSimpleOperationQuery = (options: Options<GetApiVbyApiVersionSimpleOperationData>): UseQueryOptions<GetApiVbyApiVersionSimpleOperationResponse, GetApiVbyApiVersionSimpleOperationError> => {
    return {
        key: getApiVbyApiVersionSimpleOperationQueryKey(options),
        query: async (context) => {
            const { data } = await getApiVbyApiVersionSimpleOperation({
                ...options,
                ...context,
                throwOnError: true
            });
            return data;
        }
    };
};

export const deleteCallWithoutParametersAndResponseMutation = (options?: Options<DeleteCallWithoutParametersAndResponseData>): UseMutationOptions<unknown, Options<DeleteCallWithoutParametersAndResponseData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await deleteCallWithoutParametersAndResponse({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const getCallWithoutParametersAndResponseQueryKey = (options?: Options<GetCallWithoutParametersAndResponseData>) => createQueryKey('getCallWithoutParametersAndResponse', options);

export const getCallWithoutParametersAndResponseQuery = (options?: Options<GetCallWithoutParametersAndResponseData>): UseQueryOptions<unknown, Error> => {
    return {
        key: getCallWithoutParametersAndResponseQueryKey(options),
        query: async (context) => {
            const { data } = await getCallWithoutParametersAndResponse({
                ...options,
                ...context,
                throwOnError: true
            });
            return data;
        }
    };
};

export const patchCallWithoutParametersAndResponseMutation = (options?: Options<PatchCallWithoutParametersAndResponseData>): UseMutationOptions<unknown, Options<PatchCallWithoutParametersAndResponseData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await patchCallWithoutParametersAndResponse({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const postCallWithoutParametersAndResponseMutation = (options?: Options<PostCallWithoutParametersAndResponseData>): UseMutationOptions<unknown, Options<PostCallWithoutParametersAndResponseData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await postCallWithoutParametersAndResponse({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const putCallWithoutParametersAndResponseMutation = (options?: Options<PutCallWithoutParametersAndResponseData>): UseMutationOptions<unknown, Options<PutCallWithoutParametersAndResponseData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await putCallWithoutParametersAndResponse({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const deleteFooMutation = (options: Options<DeleteFooData3>): UseMutationOptions<unknown, Options<DeleteFooData3>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await deleteFoo({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithDescriptionsMutation = (options?: Options<CallWithDescriptionsData>): UseMutationOptions<unknown, Options<CallWithDescriptionsData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithDescriptions({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

/**
 * @deprecated
 */
export const deprecatedCallMutation = (options: Options<DeprecatedCallData>): UseMutationOptions<unknown, Options<DeprecatedCallData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await deprecatedCall({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithParametersMutation = (options: Options<CallWithParametersData>): UseMutationOptions<unknown, Options<CallWithParametersData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithParameters({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithWeirdParameterNamesMutation = (options: Options<CallWithWeirdParameterNamesData>): UseMutationOptions<unknown, Options<CallWithWeirdParameterNamesData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithWeirdParameterNames({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const getCallWithOptionalParamQueryKey = (options: Options<GetCallWithOptionalParamData>) => createQueryKey('getCallWithOptionalParam', options);

export const getCallWithOptionalParamQuery = (options: Options<GetCallWithOptionalParamData>): UseQueryOptions<unknown, Error> => {
    return {
        key: getCallWithOptionalParamQueryKey(options),
        query: async (context) => {
            const { data } = await getCallWithOptionalParam({
                ...options,
                ...context,
                throwOnError: true
            });
            return data;
        }
    };
};

export const postCallWithOptionalParamMutation = (options: Options<PostCallWithOptionalParamData>): UseMutationOptions<PostCallWithOptionalParamResponse, Options<PostCallWithOptionalParamData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await postCallWithOptionalParam({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const postApiVbyApiVersionRequestBodyMutation = (options?: Options<PostApiVbyApiVersionRequestBodyData>): UseMutationOptions<unknown, Options<PostApiVbyApiVersionRequestBodyData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await postApiVbyApiVersionRequestBody({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const postApiVbyApiVersionFormDataMutation = (options?: Options<PostApiVbyApiVersionFormDataData>): UseMutationOptions<unknown, Options<PostApiVbyApiVersionFormDataData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await postApiVbyApiVersionFormData({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithDefaultParametersQueryKey = (options?: Options<CallWithDefaultParametersData>) => createQueryKey('callWithDefaultParameters', options);

export const callWithDefaultParametersQuery = (options?: Options<CallWithDefaultParametersData>): UseQueryOptions<unknown, Error> => {
    return {
        key: callWithDefaultParametersQueryKey(options),
        query: async (context) => {
            const { data } = await callWithDefaultParameters({
                ...options,
                ...context,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithDefaultOptionalParametersMutation = (options?: Options<CallWithDefaultOptionalParametersData>): UseMutationOptions<unknown, Options<CallWithDefaultOptionalParametersData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithDefaultOptionalParameters({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callToTestOrderOfParamsMutation = (options: Options<CallToTestOrderOfParamsData>): UseMutationOptions<unknown, Options<CallToTestOrderOfParamsData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callToTestOrderOfParams({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const duplicateNameMutation = (options?: Options<DuplicateNameData>): UseMutationOptions<unknown, Options<DuplicateNameData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await duplicateName({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const duplicateName2QueryKey = (options?: Options<DuplicateName2Data>) => createQueryKey('duplicateName2', options);

export const duplicateName2Query = (options?: Options<DuplicateName2Data>): UseQueryOptions<unknown, Error> => {
    return {
        key: duplicateName2QueryKey(options),
        query: async (context) => {
            const { data } = await duplicateName2({
                ...options,
                ...context,
                throwOnError: true
            });
            return data;
        }
    };
};

export const duplicateName3Mutation = (options?: Options<DuplicateName3Data>): UseMutationOptions<unknown, Options<DuplicateName3Data>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await duplicateName3({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const duplicateName4Mutation = (options?: Options<DuplicateName4Data>): UseMutationOptions<unknown, Options<DuplicateName4Data>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await duplicateName4({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithNoContentResponseQueryKey = (options?: Options<CallWithNoContentResponseData>) => createQueryKey('callWithNoContentResponse', options);

export const callWithNoContentResponseQuery = (options?: Options<CallWithNoContentResponseData>): UseQueryOptions<CallWithNoContentResponseResponse, Error> => {
    return {
        key: callWithNoContentResponseQueryKey(options),
        query: async (context) => {
            const { data } = await callWithNoContentResponse({
                ...options,
                ...context,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithResponseAndNoContentResponseQueryKey = (options?: Options<CallWithResponseAndNoContentResponseData>) => createQueryKey('callWithResponseAndNoContentResponse', options);

export const callWithResponseAndNoContentResponseQuery = (options?: Options<CallWithResponseAndNoContentResponseData>): UseQueryOptions<CallWithResponseAndNoContentResponseResponse, Error> => {
    return {
        key: callWithResponseAndNoContentResponseQueryKey(options),
        query: async (context) => {
            const { data } = await callWithResponseAndNoContentResponse({
                ...options,
                ...context,
                throwOnError: true
            });
            return data;
        }
    };
};

export const dummyAQueryKey = (options?: Options<DummyAData>) => createQueryKey('dummyA', options);

export const dummyAQuery = (options?: Options<DummyAData>): UseQueryOptions<DummyAResponse, Error> => {
    return {
        key: dummyAQueryKey(options),
        query: async (context) => {
            const { data } = await dummyA({
                ...options,
                ...context,
                throwOnError: true
            });
            return data;
        }
    };
};

export const dummyBQueryKey = (options?: Options<DummyBData>) => createQueryKey('dummyB', options);

export const dummyBQuery = (options?: Options<DummyBData>): UseQueryOptions<DummyBResponse, Error> => {
    return {
        key: dummyBQueryKey(options),
        query: async (context) => {
            const { data } = await dummyB({
                ...options,
                ...context,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithResponseQueryKey = (options?: Options<CallWithResponseData>) => createQueryKey('callWithResponse', options);

export const callWithResponseQuery = (options?: Options<CallWithResponseData>): UseQueryOptions<CallWithResponseResponse, Error> => {
    return {
        key: callWithResponseQueryKey(options),
        query: async (context) => {
            const { data } = await callWithResponse({
                ...options,
                ...context,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithDuplicateResponsesMutation = (options?: Options<CallWithDuplicateResponsesData>): UseMutationOptions<CallWithDuplicateResponsesResponse, Options<CallWithDuplicateResponsesData>, CallWithDuplicateResponsesError> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithDuplicateResponses({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithResponsesMutation = (options?: Options<CallWithResponsesData>): UseMutationOptions<CallWithResponsesResponse, Options<CallWithResponsesData>, CallWithResponsesError> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithResponses({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const collectionFormatQueryKey = (options: Options<CollectionFormatData>) => createQueryKey('collectionFormat', options);

export const collectionFormatQuery = (options: Options<CollectionFormatData>): UseQueryOptions<unknown, Error> => {
    return {
        key: collectionFormatQueryKey(options),
        query: async (context) => {
            const { data } = await collectionFormat({
                ...options,
                ...context,
                throwOnError: true
            });
            return data;
        }
    };
};

export const typesQueryKey = (options: Options<TypesData>) => createQueryKey('types', options);

export const typesQuery = (options: Options<TypesData>): UseQueryOptions<TypesResponse, Error> => {
    return {
        key: typesQueryKey(options),
        query: async (context) => {
            const { data } = await types({
                ...options,
                ...context,
                throwOnError: true
            });
            return data;
        }
    };
};

export const uploadFileMutation = (options: Options<UploadFileData>): UseMutationOptions<UploadFileResponse, Options<UploadFileData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await uploadFile({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const fileResponseQueryKey = (options: Options<FileResponseData>) => createQueryKey('fileResponse', options);

export const fileResponseQuery = (options: Options<FileResponseData>): UseQueryOptions<FileResponseResponse, Error> => {
    return {
        key: fileResponseQueryKey(options),
        query: async (context) => {
            const { data } = await fileResponse({
                ...options,
                ...context,
                throwOnError: true
            });
            return data;
        }
    };
};

export const complexTypesQueryKey = (options: Options<ComplexTypesData>) => createQueryKey('complexTypes', options);

export const complexTypesQuery = (options: Options<ComplexTypesData>): UseQueryOptions<ComplexTypesResponse, Error> => {
    return {
        key: complexTypesQueryKey(options),
        query: async (context) => {
            const { data } = await complexTypes({
                ...options,
                ...context,
                throwOnError: true
            });
            return data;
        }
    };
};

export const multipartResponseQueryKey = (options?: Options<MultipartResponseData>) => createQueryKey('multipartResponse', options);

export const multipartResponseQuery = (options?: Options<MultipartResponseData>): UseQueryOptions<MultipartResponseResponse, Error> => {
    return {
        key: multipartResponseQueryKey(options),
        query: async (context) => {
            const { data } = await multipartResponse({
                ...options,
                ...context,
                throwOnError: true
            });
            return data;
        }
    };
};

export const multipartRequestMutation = (options?: Options<MultipartRequestData>): UseMutationOptions<unknown, Options<MultipartRequestData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await multipartRequest({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const complexParamsMutation = (options: Options<ComplexParamsData>): UseMutationOptions<ComplexParamsResponse, Options<ComplexParamsData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await complexParams({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithResultFromHeaderMutation = (options?: Options<CallWithResultFromHeaderData>): UseMutationOptions<unknown, Options<CallWithResultFromHeaderData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithResultFromHeader({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const testErrorCodeMutation = (options: Options<TestErrorCodeData>): UseMutationOptions<unknown, Options<TestErrorCodeData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await testErrorCode({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const nonAsciiæøåÆøÅöôêÊ字符串Mutation = (options: Options<NonAsciiæøåÆøÅöôêÊ字符串Data>): UseMutationOptions<NonAsciiæøåÆøÅöôêÊ字符串Response, Options<NonAsciiæøåÆøÅöôêÊ字符串Data>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await nonAsciiæøåÆøÅöôêÊ字符串({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

/**
 * Login User
 */
export const putWithFormUrlEncodedMutation = (options: Options<PutWithFormUrlEncodedData>): UseMutationOptions<unknown, Options<PutWithFormUrlEncodedData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await putWithFormUrlEncoded({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};