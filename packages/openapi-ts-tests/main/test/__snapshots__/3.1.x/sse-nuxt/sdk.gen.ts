// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, Composable, TDataShape, Client } from './client';
import type { EventSubscribeResponse, EventSubscribeData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TComposable extends Composable, TData extends TDataShape = TDataShape, ResT = unknown, DefaultT = undefined> = ClientOptions<TComposable, TData, ResT, DefaultT> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get events
 */
export const eventSubscribe = <TComposable extends Composable, DefaultT extends EventSubscribeResponse = EventSubscribeResponse>(options: Options<TComposable, EventSubscribeData, EventSubscribeResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).sse.get<TComposable, EventSubscribeResponse | DefaultT, unknown, DefaultT>({
        url: '/event',
        ...options
    });
};