// This file is auto-generated by @hey-api/openapi-ts

export type Range = {
    start: {
        line: number;
        character: number;
    };
    end: {
        line: number;
        character: number;
    };
};

export type SymbolSource = {
    text: FilePartSourceText;
    type: 'symbol';
    path: string;
    range: Range;
    name: string;
    kind: number;
};

export type FilePartSourceText = {
    value: string;
    start: number;
    end: number;
};

export type FileSource = {
    text: FilePartSourceText;
    type: 'file';
    path: string;
};

export type FilePartSource = ({
    type: 'file';
} & FileSource) | ({
    type: 'symbol';
} & SymbolSource);

export type EventIdeInstalled = {
    type: 'ide.installed';
    properties: {
        ide: string;
    };
};

export type EventFileWatcherUpdated = {
    type: 'file.watcher.updated';
    properties: {
        file: string;
        event: 'rename' | 'change';
    };
};

export type EventServerConnected = {
    type: 'server.connected';
    properties: {
        [key: string]: unknown;
    };
};

export type EventSessionError = {
    type: 'session.error';
    properties: {
        sessionID?: string;
        error?: ({
            name: 'ProviderAuthError';
        } & ProviderAuthError) | ({
            name: 'UnknownError';
        } & UnknownError) | ({
            name: 'MessageOutputLengthError';
        } & MessageOutputLengthError) | ({
            name: 'MessageAbortedError';
        } & MessageAbortedError);
    };
};

export type MessageAbortedError = {
    name: 'MessageAbortedError';
    data: {
        [key: string]: unknown;
    };
};

export type MessageOutputLengthError = {
    name: 'MessageOutputLengthError';
    data: {
        [key: string]: unknown;
    };
};

export type UnknownError = {
    name: 'UnknownError';
    data: {
        message: string;
    };
};

export type ProviderAuthError = {
    name: 'ProviderAuthError';
    data: {
        providerID: string;
        message: string;
    };
};

export type EventSessionIdle = {
    type: 'session.idle';
    properties: {
        sessionID: string;
    };
};

export type EventSessionDeleted = {
    type: 'session.deleted';
    properties: {
        info: Session;
    };
};

export type Session = {
    id: string;
    parentID?: string;
    share?: {
        url: string;
    };
    title: string;
    version: string;
    time: {
        created: number;
        updated: number;
    };
    revert?: {
        messageID: string;
        partID?: string;
        snapshot?: string;
        diff?: string;
    };
};

export type EventSessionUpdated = {
    type: 'session.updated';
    properties: {
        info: Session;
    };
};

export type EventFileEdited = {
    type: 'file.edited';
    properties: {
        file: string;
    };
};

export type EventPermissionReplied = {
    type: 'permission.replied';
    properties: {
        sessionID: string;
        permissionID: string;
        response: string;
    };
};

export type Permission = {
    id: string;
    type: string;
    pattern?: string;
    sessionID: string;
    messageID: string;
    callID?: string;
    title: string;
    metadata: {
        [key: string]: unknown;
    };
    time: {
        created: number;
    };
};

export type EventPermissionUpdated = {
    type: 'permission.updated';
    properties: Permission;
};

export type EventStorageWrite = {
    type: 'storage.write';
    properties: {
        key: string;
        content?: unknown;
    };
};

export type EventMessagePartRemoved = {
    type: 'message.part.removed';
    properties: {
        sessionID: string;
        messageID: string;
        partID: string;
    };
};

export type AgentPart = {
    id: string;
    sessionID: string;
    messageID: string;
    type: 'agent';
    name: string;
    source?: {
        value: string;
        start: number;
        end: number;
    };
};

export type PatchPart = {
    id: string;
    sessionID: string;
    messageID: string;
    type: 'patch';
    hash: string;
    files: Array<string>;
};

export type SnapshotPart = {
    id: string;
    sessionID: string;
    messageID: string;
    type: 'snapshot';
    snapshot: string;
};

export type StepFinishPart = {
    id: string;
    sessionID: string;
    messageID: string;
    type: 'step-finish';
    cost: number;
    tokens: {
        input: number;
        output: number;
        reasoning: number;
        cache: {
            read: number;
            write: number;
        };
    };
};

export type StepStartPart = {
    id: string;
    sessionID: string;
    messageID: string;
    type: 'step-start';
};

export type ToolStateError = {
    status: 'error';
    input: {
        [key: string]: unknown;
    };
    error: string;
    metadata?: {
        [key: string]: unknown;
    };
    time: {
        start: number;
        end: number;
    };
};

export type ToolStateCompleted = {
    status: 'completed';
    input: {
        [key: string]: unknown;
    };
    output: string;
    title: string;
    metadata: {
        [key: string]: unknown;
    };
    time: {
        start: number;
        end: number;
    };
};

export type ToolStateRunning = {
    status: 'running';
    input?: unknown;
    title?: string;
    metadata?: {
        [key: string]: unknown;
    };
    time: {
        start: number;
    };
};

export type ToolStatePending = {
    status: 'pending';
};

export type ToolState = ({
    status: 'pending';
} & ToolStatePending) | ({
    status: 'running';
} & ToolStateRunning) | ({
    status: 'completed';
} & ToolStateCompleted) | ({
    status: 'error';
} & ToolStateError);

export type ToolPart = {
    id: string;
    sessionID: string;
    messageID: string;
    type: 'tool';
    callID: string;
    tool: string;
    state: ToolState;
};

export type FilePart = {
    id: string;
    sessionID: string;
    messageID: string;
    type: 'file';
    mime: string;
    filename?: string;
    url: string;
    source?: FilePartSource;
};

export type ReasoningPart = {
    id: string;
    sessionID: string;
    messageID: string;
    type: 'reasoning';
    text: string;
    metadata?: {
        [key: string]: unknown;
    };
    time: {
        start: number;
        end?: number;
    };
};

export type TextPart = {
    id: string;
    sessionID: string;
    messageID: string;
    type: 'text';
    text: string;
    synthetic?: boolean;
    time?: {
        start: number;
        end?: number;
    };
};

export type Part = ({
    type: 'text';
} & TextPart) | ({
    type: 'reasoning';
} & ReasoningPart) | ({
    type: 'file';
} & FilePart) | ({
    type: 'tool';
} & ToolPart) | ({
    type: 'step-start';
} & StepStartPart) | ({
    type: 'step-finish';
} & StepFinishPart) | ({
    type: 'snapshot';
} & SnapshotPart) | ({
    type: 'patch';
} & PatchPart) | ({
    type: 'agent';
} & AgentPart);

export type EventMessagePartUpdated = {
    type: 'message.part.updated';
    properties: {
        part: Part;
    };
};

export type EventMessageRemoved = {
    type: 'message.removed';
    properties: {
        sessionID: string;
        messageID: string;
    };
};

export type AssistantMessage = {
    id: string;
    sessionID: string;
    role: 'assistant';
    time: {
        created: number;
        completed?: number;
    };
    error?: ({
        name: 'ProviderAuthError';
    } & ProviderAuthError) | ({
        name: 'UnknownError';
    } & UnknownError) | ({
        name: 'MessageOutputLengthError';
    } & MessageOutputLengthError) | ({
        name: 'MessageAbortedError';
    } & MessageAbortedError);
    system: Array<string>;
    modelID: string;
    providerID: string;
    mode: string;
    path: {
        cwd: string;
        root: string;
    };
    summary?: boolean;
    cost: number;
    tokens: {
        input: number;
        output: number;
        reasoning: number;
        cache: {
            read: number;
            write: number;
        };
    };
};

export type UserMessage = {
    id: string;
    sessionID: string;
    role: 'user';
    time: {
        created: number;
    };
};

export type Message = ({
    role: 'user';
} & UserMessage) | ({
    role: 'assistant';
} & AssistantMessage);

export type EventMessageUpdated = {
    type: 'message.updated';
    properties: {
        info: Message;
    };
};

export type EventLspClientDiagnostics = {
    type: 'lsp.client.diagnostics';
    properties: {
        serverID: string;
        path: string;
    };
};

export type EventInstallationUpdated = {
    type: 'installation.updated';
    properties: {
        version: string;
    };
};

export type Event = ({
    type: 'installation.updated';
} & EventInstallationUpdated) | ({
    type: 'lsp.client.diagnostics';
} & EventLspClientDiagnostics) | ({
    type: 'message.updated';
} & EventMessageUpdated) | ({
    type: 'message.removed';
} & EventMessageRemoved) | ({
    type: 'message.part.updated';
} & EventMessagePartUpdated) | ({
    type: 'message.part.removed';
} & EventMessagePartRemoved) | ({
    type: 'storage.write';
} & EventStorageWrite) | ({
    type: 'permission.updated';
} & EventPermissionUpdated) | ({
    type: 'permission.replied';
} & EventPermissionReplied) | ({
    type: 'file.edited';
} & EventFileEdited) | ({
    type: 'session.updated';
} & EventSessionUpdated) | ({
    type: 'session.deleted';
} & EventSessionDeleted) | ({
    type: 'session.idle';
} & EventSessionIdle) | ({
    type: 'session.error';
} & EventSessionError) | ({
    type: 'server.connected';
} & EventServerConnected) | ({
    type: 'file.watcher.updated';
} & EventFileWatcherUpdated) | ({
    type: 'ide.installed';
} & EventIdeInstalled);

export type EventSubscribeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/event';
};

export type EventSubscribeResponses = {
    /**
     * Event stream
     */
    200: Event;
};

export type EventSubscribeResponse = EventSubscribeResponses[keyof EventSubscribeResponses];

export type ClientOptions = {
    baseURL: `${string}://${string}` | (string & {});
};