// This file is auto-generated by @hey-api/openapi-ts

/**
 * # session.user_phone_callout_ringing
 *
 * The **Invited party's phone (call out) ringing** event is triggered every time a user's phone is ringing when they were invited to join a session through phone (call out). Video SDK call out operates in a similar manner as [Zoom meeting call out](https://support.zoom.com/hc/article?id=zm_kb&sysparm_article=KB0062038).
 *
 * ## Prerequisites
 *
 * * **Event Subscriptions** must be enabled for your app with the following configurations:
 * * A valid **Event Notification Endpoint URL**.
 * * The **Invited party's phone (call out) ringing** subscription enabled under the **Session** event.
 *
 *
 *
 *
 * **Event type**: `session.user_phone_callout_ringing`
 *
 */
export type SessionUserPhoneCalloutRingingWebhookPayload = {
    /**
     * The name of the event.
     */
    event: string;
    /**
     * A timestamp at which the event occurred.
     */
    event_ts: number;
    payload: {
        /**
         * The account ID of the session host.
         */
        account_id: string;
        /**
         * Information about the session.
         */
        object: {
            /**
             * The session ID.
             * @deprecated
             */
            id?: number;
            /**
             * The session's universally unique identifier (UUID). Each session instance generates a session UUID.
             * @deprecated
             */
            uuid?: string;
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key: string;
            /**
             * Another identifier for the inviter. Can be a number or characters.
             */
            user_key: string;
            /**
             * The user ID of the session host.
             */
            host_id: string;
            /**
             * Information about the invited user.
             */
            participant: {
                /**
                 * The user's name to display in the session.
                 */
                invitee_name: string;
                /**
                 * The user's phone number.
                 */
                phone_number: number;
                /**
                 * The number used to call out to the invited user.
                 */
                from_number: number;
            };
        };
    };
};

export type SessionUserPhoneCalloutRingingWebhookRequest = {
    body: SessionUserPhoneCalloutRingingWebhookPayload;
    key: 'session.user_phone_callout_ringing';
    path?: never;
    query?: never;
};

/**
 * # session.user_room_system_callout_ringing
 *
 * The **Invited party's phone (call out) ringing in Zoom room** event is triggered every time a user's phone is ringing when they were invited to [join a session through phone (call out) from a Zoom room](https://support.zoom.us/hc/en-us/articles/205369035).
 *
 * ## Prerequisites
 *
 * * **Event Subscriptions** must be enabled for your app with the following configurations:
 * * A valid **Event Notification Endpoint URL**.
 * * The **Invited party's phone (call out) ringing in Zoom room** subscription enabled under the **Session** event.
 *
 *
 *
 * **Event type**: `session.user_room_system_callout_ringing`
 *
 */
export type SessionUserRoomSystemCalloutRingingWebhookPayload = {
    /**
     * The name of the event.
     */
    event: string;
    /**
     * A timestamp at which the event occurred.
     */
    event_ts: number;
    payload: {
        /**
         * The account ID of the session host.
         */
        account_id: string;
        /**
         * Information about the session.
         */
        object: {
            /**
             * The session ID.
             * @deprecated
             */
            id?: number;
            /**
             * The session's universally unique identifier (UUID). Each session instance generates a session UUID.
             * @deprecated
             */
            uuid?: string;
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The user ID of the session host.
             */
            host_id: string;
            /**
             * The request unique identifier (UUID).
             */
            message_id: string;
            /**
             * The user name of the event's trigger.
             */
            inviter_name: string;
            /**
             * Information about the invited participant.
             */
            participant: {
                /**
                 * The type of call out. Use a value of h323 or sip.
                 */
                call_type: string;
                /**
                 * The user's device IP address.
                 */
                device_ip: string;
                [key: string]: unknown | string;
            };
        };
    };
};

export type SessionUserRoomSystemCalloutRingingWebhookRequest = {
    body: SessionUserRoomSystemCalloutRingingWebhookPayload;
    key: 'session.user_room_system_callout_ringing';
    path?: never;
    query?: never;
};

/**
 * # session.recording_started
 * ---
 *
 * Event: `session.recording_started`
 *
 * ## Event description
 *
 * The **Session recording started** event is triggered every time a recording is started by one of your app users or account users.
 *
 * Only a session host or co-host can start, pause, resume, or stop a cloud recording. A recording is considered complete **after** the host or co-host ends the session. See [Enable cloud recording](https://developers.zoom.us/docs/video-sdk/account/#enable-cloud-recording) for details.
 *
 * ## Prerequisites
 *
 * * Cloud Recording must be enabled on the Video SDK account.
 * * Event Subscriptions must be enabled for your app with the following configurations:
 * * A valid Event Notification Endpoint URL.
 * * **Session recording started** subscription enabled under the **Recording** event.
 *
 * The tabs below display the complete schema, payload with data types, and an example of the `session.recording_started` event notification:
 *
 *
 *
 * **Event type**: `session.recording_started`
 *
 */
export type SessionRecordingStartedWebhookPayload = {
    /**
     * The event's name.
     */
    event: 'session.recording_started';
    /**
     * A timestamp, in milliseconds since epoch, at which the event occurred.
     */
    event_ts: number;
    payload: {
        /**
         * The Video SDK account ID.
         */
        account_id: string;
        /**
         * Information about the session. This object only returns updated properties.
         */
        object: {
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key: string;
            /**
             * The time at which the session started.
             */
            start_time: string;
            /**
             * The user's timezone.
             */
            timezone: string;
            recording_file: {
                /**
                 * The recording start time.
                 */
                recording_start?: string;
                /**
                 * The recording end time. Response in general query.
                 */
                recording_end?: string;
            };
        };
    };
};

export type SessionRecordingStartedWebhookRequest = {
    body: SessionRecordingStartedWebhookPayload;
    key: 'session.recording_started';
    path?: never;
    query?: never;
};

/**
 * # session.recording_resumed
 * ---
 *
 * Event: `session.recording_resumed`
 *
 * ## Event description
 *
 * The **Session recording resumed** event is triggered every time a previously paused recording of a session is resumed.
 *
 * Only a session host or co-host can start, pause, resume, or stop a cloud recording. A recording is considered complete **after** the host or co-host ends the session. See [Enable cloud recording](https://developers.zoom.us/docs/video-sdk/account/#enable-cloud-recording) for details.
 *
 * ## Prerequisites
 *
 * * Cloud Recording must be enabled on the Video SDK account.
 * * Event Subscriptions must be enabled for your app with the following configurations:
 * * A valid Event Notification Endpoint URL.
 * * **Session recording resumed** subscription enabled under the **Recording** event.
 *
 * The tabs below display the complete schema, payload with data types, and an example of the `session.recording_resumed` event notification:
 *
 *
 *
 * **Event type**: `session.recording_resumed`
 *
 */
export type SessionRecordingResumedWebhookPayload = {
    /**
     * The event's name.
     */
    event: 'session.recording_resumed';
    /**
     * A timestamp, in milliseconds since epoch, at which the event occurred.
     */
    event_ts: number;
    payload: {
        /**
         * The Video SDK account ID.
         */
        account_id: string;
        /**
         * Information about the session. This object only returns updated properties.
         */
        object: {
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key: string;
            /**
             * The time at which the session started.
             */
            start_time: string;
            /**
             * The user's timezone.
             */
            timezone: string;
            recording_file: {
                /**
                 * The recording start time.
                 */
                recording_start?: string;
                /**
                 * The recording end time. Response in general query.
                 */
                recording_end?: string;
            };
        };
    };
};

export type SessionRecordingResumedWebhookRequest = {
    body: SessionRecordingResumedWebhookPayload;
    key: 'session.recording_resumed';
    path?: never;
    query?: never;
};

/**
 * # session.live_streaming_stopped
 * ---
 *
 *
 * The Session Live Streaming Stopped event is triggered every time a user stops a live stream.
 *
 * ## Prerequisites
 * Event Subscriptions must be enabled for your app with the following configurations:
 *
 * * A valid Event Notification Endpoint URL.
 * * **Session Live Streaming Stopped** subscription enabled under the **Video SDK** event.
 *
 * The tabs below display the complete schema, payload with data types, and an example of the `session.live_streaming_stopped` event notification:
 *
 *
 *
 * **Event type**: `session.live_streaming_stopped`
 *
 */
export type SessionLiveStreamingStoppedWebhookPayload = {
    /**
     * The name of the event.
     */
    event: 'session.live_streaming_stopped';
    /**
     * Timestamp (in milliseconds since epoch) at which the event occurred. The value of this field is returned in long(int64) format.
     */
    event_ts: number;
    payload: {
        /**
         * The Video SDK account ID.
         */
        account_id: string;
        /**
         * Information about the session.
         */
        object: {
            /**
             * The session ID.
             * @deprecated
             */
            id: string;
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key?: string;
            /**
             * The session's start time.
             */
            start_time: string;
            /**
             * Information about the participant.
             */
            live_streaming: {
                /**
                 * The name of the Live Streaming service.
                 */
                service: 'Facebook' | 'Workplace_by_Facebook' | 'YouTube' | 'Custom_Live_Streaming_Service';
                /**
                 * The live stream settings.
                 */
                custom_live_streaming_settings: {
                    /**
                     * The stream's URL.
                     */
                    stream_url: string;
                    /**
                     * The stream's Key.
                     */
                    stream_key: string;
                    /**
                     * The live stream's page URL.
                     */
                    page_url: string;
                    /**
                     * The number of pixels in each dimension that the video camera can display.
                     */
                    resolution?: string;
                };
                /**
                 * The live stream's stop time.
                 */
                date_time: string;
            };
        };
    };
};

export type SessionLiveStreamingStoppedWebhookRequest = {
    body: SessionLiveStreamingStoppedWebhookPayload;
    key: 'session.live_streaming_stopped';
    path?: never;
    query?: never;
};

/**
 * # session.stream_ingestion_stopped
 * Zoom triggers the **Session stream ingestion stopped** event every time a user stops sending live incoming streams.
 *
 * ## Prerequisites
 *
 * * **Event Subscriptions** must be enabled for your app with the following configurations:
 * * A valid **Event Notification Endpoint URL**.
 * * The **Session stream ingestion stopped** subscription enabled under the **Video SDK** event.
 *
 *
 * **Event type**: `session.stream_ingestion_stopped`
 *
 */
export type SessionStreamIngestionStoppedWebhookPayload = {
    /**
     * Event name.
     */
    event: 'session.stream_ingestion_stopped';
    /**
     * Timestamp (in milliseconds since epoch) when the event occurred. The value of this field is returned in long (int64) format.
     */
    event_ts: number;
    payload: {
        /**
         * The Video SDK account ID.
         */
        account_id: string;
        /**
         * Information about the session.
         */
        object: {
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key?: string;
            /**
             * Information about the stream ingestion.
             */
            stream_ingestion: {
                /**
                 * The stream ingestion ID.
                 */
                stream_id: string;
                /**
                 * The stream ingestion name.
                 */
                stream_name: string;
                /**
                 * The stream ingestion description.
                 */
                stream_description?: string;
                /**
                 * The stream ingestion key.
                 */
                stream_key: string;
                /**
                 * The stream URL.
                 */
                stream_url: string;
                /**
                 * The backup stream URL.
                 */
                backup_stream_url: string;
            };
        };
    };
};

export type SessionStreamIngestionStoppedWebhookRequest = {
    body: SessionStreamIngestionStoppedWebhookPayload;
    key: 'session.stream_ingestion_stopped';
    path?: never;
    query?: never;
};

/**
 * # session.user_room_system_callout_rejected
 *
 * The **Invited party rejected a session invitation through phone (call out) via Zoom room** event is triggered every time a user rejects an invitation to [join a session through phone (call out) from a Zoom room](https://support.zoom.us/hc/en-us/articles/205369035).
 *
 * ## Prerequisites
 *
 * * **Event Subscriptions** must be enabled for your app with the following configurations:
 * * A valid **Event Notification Endpoint URL**.
 * * The **Invited party rejected a session invitation through phone (call out) via Zoom room** subscription enabled under the **Session** event.
 *
 *
 *
 * **Event type**: `session.user_room_system_callout_rejected`
 *
 */
export type SessionUserRoomSystemCalloutRejectedWebhookPayload = {
    /**
     * The name of the event.
     */
    event: string;
    /**
     * A timestamp at which the event occurred.
     */
    event_ts: number;
    payload: {
        /**
         * The account ID of the session host.
         */
        account_id: string;
        /**
         * Information about the session.
         */
        object: {
            /**
             * The session ID.
             * @deprecated
             */
            id?: number;
            /**
             * The session's universally unique identifier (UUID). Each session instance generates a session UUID.
             * @deprecated
             */
            uuid?: string;
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The user ID of the session host.
             */
            host_id: string;
            /**
             * The request unique identifier (UUID).
             */
            message_id: string;
            /**
             * The user name of the event's trigger.
             */
            inviter_name: string;
            /**
             * Information about the invited participant.
             */
            participant: {
                /**
                 * The type of call out. Use a value of h323 or sip.
                 */
                call_type: string;
                /**
                 * The user's device IP address.
                 */
                device_ip: string;
                [key: string]: unknown | string;
            };
        };
    };
};

export type SessionUserRoomSystemCalloutRejectedWebhookRequest = {
    body: SessionUserRoomSystemCalloutRejectedWebhookPayload;
    key: 'session.user_room_system_callout_rejected';
    path?: never;
    query?: never;
};

/**
 * # session.alert
 * ---
 *
 *
 * The Session Alert event is triggered every time a service issue is encountered during a session in your account.
 *
 * The following quality metrics can trigger an alert:
 *
 * * Unstable audio quality
 * * Unstable video quality
 * * Unstable screen share quality
 * * High CPU occupation
 * * Call Reconnection
 *
 * ## Prerequisites
 * Event Subscriptions must be enabled for your [Marketplace app](https://marketplace.zoom.us/user/build) with the following configurations:
 *
 * * A valid Event Notification Endpoint URL.
 * * Session Alert subscription enabled under the Video SDK event.
 *
 * The tabs below display the complete schema, payload with data types, and an example of the `session.alert` event notification:
 *
 *
 * **Event type**: `session.alert`
 *
 */
export type SessionAlertWebhookPayload = {
    /**
     * The event's name.
     */
    event: 'session.alert';
    /**
     * A timestamp, in milliseconds since epoch, at which the event occurred.
     */
    event_ts: number;
    payload: {
        /**
         * The Video SDK account ID.
         */
        account_id: string;
        /**
         * Information about the session. This object only returns updated properties.
         */
        object: {
            /**
             * The session ID.
             */
            id: string;
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key?: string;
            /**
             * Issues that occurred during the session.
             */
            issues: Array<'Unstable audio quality' | 'Unstable video quality' | 'Unstable screen share quality' | 'High CPU occupation' | 'Call Reconnection'>;
        };
    };
};

export type SessionAlertWebhookRequest = {
    body: SessionAlertWebhookPayload;
    key: 'session.alert';
    path?: never;
    query?: never;
};

/**
 * # session.sharing_ended
 * ---
 *
 *
 * The Session Sharing Ended event is triggered every time a user stops sharing the screen during a session.
 *
 * ## Prerequisites
 * Event Subscriptions must be enabled for your [Marketplace app](https://marketplace.zoom.us/user/build) with the following configurations:
 *
 * * A valid Event Notification Endpoint URL.
 * * **Session Sharing Ended** subscription enabled under the **Video SDK** event.
 *
 * The tabs below display the complete schema, payload with data types, and an example of the `session.sharing_ended` event notification:
 *
 *
 *
 * **Event type**: `session.sharing_ended`
 *
 */
export type SessionSharingEndedWebhookPayload = {
    /**
     * The event's name.
     */
    event: 'session.sharing_ended';
    /**
     * A timestamp, in milliseconds since epoch, at which the event occurred.
     */
    event_ts: number;
    payload: {
        /**
         * The Video SDK account ID.
         */
        account_id: string;
        /**
         * Information about the session. This object only returns updated properties.
         */
        object: {
            /**
             * The session ID.
             * @deprecated
             */
            id: string;
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key?: string;
            /**
             * Information about the user.
             */
            user: {
                /**
                 * The user's unique ID. This value is assigned to the user upon joining a session and is only valid for that session.
                 */
                id: string;
                /**
                 * The user's username.
                 */
                name: string;
                /**
                 * Another identifier for the user. Can be a number or characters.
                 */
                user_key?: string;
                /**
                 * Information about the session's screen sharing.
                 */
                sharing_details: {
                    /**
                     * The type of shared content:
                     * * application — An application. For example, a web browser.
                     * * whiteboard — The Zoom [whiteboard](https://support.zoom.us/hc/en-us/articles/205677665-Sharing-a-whiteboard).
                     * * desktop — A user's desktop.
                     * * unknown — An unrecognized application, such as a third party app.
                     */
                    content: 'application' | 'whiteboard' | 'desktop' | 'unknown';
                    /**
                     * The session's screen sharing date and time.
                     */
                    date_time: string;
                };
            };
        };
    };
};

export type SessionSharingEndedWebhookRequest = {
    body: SessionSharingEndedWebhookPayload;
    key: 'session.sharing_ended';
    path?: never;
    query?: never;
};

/**
 * # session.recording_paused
 * ---
 *
 * Event: `session.recording_paused`
 *
 * ## Event description
 *
 * The **Session recording paused** event is triggered every time a recording is paused by one of your app or account users.
 *
 * Only a session host or co-host can start, pause, resume, or stop a cloud recording. A recording is considered complete **after** the host or co-host ends the session. See [Enable cloud recording](https://developers.zoom.us/docs/video-sdk/account/#enable-cloud-recording) for details.
 *
 * ## Prerequisites
 *
 * * Cloud Recording must be enabled on the Video SDK account.
 * * Event Subscriptions must be enabled for your app with the following configurations:
 * * A valid Event Notification Endpoint URL.
 * * "**Session recording paused**" subscription enabled under the **Recording** event.
 *
 * The tabs below display the complete schema, payload with data types, and an example of the `session.recording_paused` event notification:
 *
 *
 *
 * **Event type**: `session.recording_paused`
 *
 */
export type SessionRecordingPausedWebhookPayload = {
    /**
     * The event's name.
     */
    event: 'session.recording_paused';
    /**
     * A timestamp, in milliseconds since epoch, at which the event occurred.
     */
    event_ts: number;
    payload: {
        /**
         * The Video SDK account ID.
         */
        account_id: string;
        /**
         * Information about the session. This object only returns updated properties.
         */
        object: {
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key: string;
            /**
             * The time at which the session started.
             */
            start_time: string;
            /**
             * The user's timezone.
             */
            timezone: string;
            recording_file: {
                /**
                 * The recording start time.
                 */
                recording_start?: string;
                /**
                 * The recording end time. Response in general query.
                 */
                recording_end?: string;
            };
        };
    };
};

export type SessionRecordingPausedWebhookRequest = {
    body: SessionRecordingPausedWebhookPayload;
    key: 'session.recording_paused';
    path?: never;
    query?: never;
};

/**
 * # session.ended
 * ---
 *
 *
 * The Session Ended event is triggered when the host ends the session, or when all users have left the session.
 *
 * ## Prerequisites
 * Event Subscriptions must be enabled for your app with the following configurations:
 *
 * * A valid Event Notification Endpoint URL.
 * * **Session Ended** subscription enabled under the **Video SDK** event.
 *
 * The tabs below display the complete schema, payload with data types, and an example of the `session.ended` event notification:
 *
 *
 *
 * **Event type**: `session.ended`
 *
 */
export type SessionEndedWebhookPayload = {
    /**
     * The name of the event.
     */
    event: 'session.ended';
    /**
     * Timestamp at which the event occurred, in milliseconds since epoch. The value of this field is returned in long(int64) format.
     */
    event_ts: number;
    payload: {
        /**
         * The Video SDK account ID.
         */
        account_id: string;
        /**
         * Information about the session.
         */
        object: {
            /**
             * The session ID.
             * @deprecated
             */
            id: string;
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key?: string;
            /**
             * The session's start time.
             */
            start_time: string;
            /**
             * The session's end time.
             */
            end_time: string;
        };
    };
};

export type SessionEndedWebhookRequest = {
    body: SessionEndedWebhookPayload;
    key: 'session.ended';
    path?: never;
    query?: never;
};

/**
 * # session.started
 * ---
 *
 *
 * The Session Start event is triggered when the first user (including host and co-host) joins.
 *
 * ## Prerequisites
 * Event Subscriptions must be enabled for your app with the following configurations:
 *
 * * A valid Event Notification Endpoint URL.
 * * **Session Started** subscription enabled under the **Video SDK** event.
 *
 * The tabs below display the complete schema, payload with data types, and an example of the `session.started` event notification:
 *
 *
 *
 * **Event type**: `session.started`
 *
 */
export type SessionStartedWebhookPayload = {
    /**
     * The name of the event.
     */
    event: 'session.started';
    /**
     * Timestamp (in milliseconds since epoch) at which the event occurred. The value of this field is returned in long(int64) format.
     */
    event_ts: number;
    payload: {
        /**
         * The Video SDK account ID.
         */
        account_id: string;
        /**
         * Information about the session.
         */
        object: {
            /**
             * The session's ID.
             * @deprecated
             */
            id: string;
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key?: string;
            /**
             * The session's start time.
             */
            start_time: string;
        };
    };
};

export type SessionStartedWebhookRequest = {
    body: SessionStartedWebhookPayload;
    key: 'session.started';
    path?: never;
    query?: never;
};

/**
 * # session.stream_ingestion_unbind
 * Zoom triggers the **Session stream ingestion unbind** event every time a session unbinds a stream key.
 *
 * ## Prerequisites
 *
 * * **Event Subscriptions** must be enabled for your app with the following configurations:
 * * A valid **Event Notification Endpoint URL**.
 * * The **Session stream ingestion unbind** subscription enabled under the **Video SDK** event.
 *
 *
 * **Event type**: `session.stream_ingestion_unbind`
 *
 */
export type SessionStreamIngestionUnbindWebhookPayload = {
    /**
     * Event name.
     */
    event: 'session.stream_ingestion_unbind';
    /**
     * Timestamp (in milliseconds since epoch) at which the event occurred. The value of this field is returned in long (int64) format.
     */
    event_ts: number;
    payload: {
        /**
         * The Video SDK account ID.
         */
        account_id: string;
        /**
         * Information about the session.
         */
        object: {
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key?: string;
            /**
             * Information about the stream ingestion.
             */
            stream_ingestion: {
                /**
                 * The stream ingestion ID.
                 */
                stream_id: string;
                /**
                 * The stream ingestion name.
                 */
                stream_name: string;
                /**
                 * The stream ingestion description.
                 */
                stream_description?: string;
                /**
                 * The stream ingestion key.
                 */
                stream_key: string;
                /**
                 * The stream URL.
                 */
                stream_url: string;
                /**
                 * The backup stream URL.
                 */
                backup_stream_url: string;
            };
        };
    };
};

export type SessionStreamIngestionUnbindWebhookRequest = {
    body: SessionStreamIngestionUnbindWebhookPayload;
    key: 'session.stream_ingestion_unbind';
    path?: never;
    query?: never;
};

/**
 * # session.live_streaming_started
 * ---
 *
 *
 * The Session Live Streaming Started event is triggered every time a user starts a live stream.
 *
 * ## Prerequisites
 * Event Subscriptions must be enabled for your app with the following configurations:
 *
 * * A valid Event Notification Endpoint URL.
 * * **Session Live Streaming Started** subscription enabled under the **Video SDK** event.
 *
 * The tabs below display the complete schema, payload with data types, and an example of the `session.live_streaming_started` event notification:
 *
 *
 *
 * **Event type**: `session.live_streaming_started`
 *
 */
export type SessionLiveStreamingStartedWebhookPayload = {
    /**
     * Name of the event.
     */
    event: 'session.live_streaming_started';
    /**
     * Timestamp (in milliseconds since epoch) at which the event occurred. The value of this field is returned in long(int64) format.
     */
    event_ts: number;
    payload: {
        /**
         * The Video SDK account ID.
         */
        account_id: string;
        /**
         * Information about the session.
         */
        object: {
            /**
             * The session ID.
             * @deprecated
             */
            id: string;
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key?: string;
            /**
             * The session's start time.
             */
            start_time: string;
            /**
             * Information about the participant.
             */
            live_streaming: {
                /**
                 * The name of the Live Streaming service.
                 */
                service: 'Facebook' | 'Workplace_by_Facebook' | 'YouTube' | 'Custom_Live_Streaming_Service';
                /**
                 * The live stream settings.
                 */
                custom_live_streaming_settings: {
                    /**
                     * The stream's URL.
                     */
                    stream_url: string;
                    /**
                     * The stream's key.
                     */
                    stream_key: string;
                    /**
                     * The live stream's page URL.
                     */
                    page_url: string;
                    /**
                     * The number of pixels in each dimension that the video camera can display.
                     */
                    resolution?: string;
                };
                /**
                 * The live stream's start time.
                 */
                date_time: string;
            };
        };
    };
};

export type SessionLiveStreamingStartedWebhookRequest = {
    body: SessionLiveStreamingStartedWebhookPayload;
    key: 'session.live_streaming_started';
    path?: never;
    query?: never;
};

/**
 * # session.user_room_system_callout_missed
 *
 * The **Invited party missed a session invitation through phone (call out) via Zoom room** event is triggered every time an invitation to [join a session through phone (call out) from a Zoom room](https://support.zoom.us/hc/en-us/articles/205369035) times out.
 *
 * ## Prerequisites
 *
 * * **Event Subscriptions** must be enabled for your app with the following configurations:
 * * A valid **Event Notification Endpoint URL**.
 * * The **Invited party missed a session invitation through phone (call out) via Zoom room** subscription enabled under the **Session** event.
 *
 *
 *
 * **Event type**: `session.user_room_system_callout_missed`
 *
 */
export type SessionUserRoomSystemCalloutMissedWebhookPayload = {
    /**
     * The name of the event.
     */
    event: string;
    /**
     * A timestamp at which the event occurred.
     */
    event_ts: number;
    payload: {
        /**
         * The account ID of the session host.
         */
        account_id: string;
        /**
         * Information about the session.
         */
        object: {
            /**
             * The session ID.
             * @deprecated
             */
            id?: number;
            /**
             * The session's universally unique identifier (UUID). Each session instance generates a session UUID.
             * @deprecated
             */
            uuid?: string;
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The user ID of the session host.
             */
            host_id: string;
            /**
             * The request unique identifier (UUID).
             */
            message_id: string;
            /**
             * The user name of the event's trigger.
             */
            inviter_name: string;
            /**
             * Information about the invited participant.
             */
            participant: {
                /**
                 * The type of call out. Use a value of h323 or sip.
                 */
                call_type: string;
                /**
                 * The user's device IP address.
                 */
                device_ip: string;
                [key: string]: unknown | string;
            };
        };
    };
};

export type SessionUserRoomSystemCalloutMissedWebhookRequest = {
    body: SessionUserRoomSystemCalloutMissedWebhookPayload;
    key: 'session.user_room_system_callout_missed';
    path?: never;
    query?: never;
};

/**
 * # session.user_phone_callout_accepted
 *
 * The **Invited party answered a session invitation through phone (call out)** event is triggered every time a user accepts an invitation to join a session through phone (call out). Video SDK call out operates in a similar manner as [Zoom meeting call out](https://support.zoom.com/hc/article?id=zm_kb&sysparm_article=KB0062038).
 *
 * ## Prerequisites
 *
 * * **Event Subscriptions** must be enabled for your app with the following configurations:
 * * A valid **Event Notification Endpoint URL**.
 * * The **Invited party answered a session invitation through phone (call out)** subscription enabled under the **Session** event.
 *
 *
 *
 * **Event type**: `session.user_phone_callout_accepted`
 *
 */
export type SessionUserPhoneCalloutAcceptedWebhookPayload = {
    /**
     * The name of the event.
     */
    event: string;
    /**
     * A timestamp at which the event occurred.
     */
    event_ts: number;
    payload: {
        /**
         * The account ID of the session host.
         */
        account_id: string;
        /**
         * Information about the session.
         */
        object: {
            /**
             * The session ID.
             * @deprecated
             */
            id?: number;
            /**
             * The session's universally unique identifier (UUID). Each session instance generates a session UUID.
             * @deprecated
             */
            uuid?: string;
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key: string;
            /**
             * Another identifier for the inviter. Can be a number or characters.
             */
            user_key: string;
            /**
             * The user ID of the session host.
             */
            host_id: string;
            /**
             * Information about the invited participant.
             */
            participant: {
                /**
                 * The user's name to display in the session.
                 */
                invitee_name: string;
                /**
                 * The user's phone number.
                 */
                phone_number: number;
                /**
                 * The number used to call out to the invited user.
                 */
                from_number: number;
            };
        };
    };
};

export type SessionUserPhoneCalloutAcceptedWebhookRequest = {
    body: SessionUserPhoneCalloutAcceptedWebhookPayload;
    key: 'session.user_phone_callout_accepted';
    path?: never;
    query?: never;
};

/**
 * # session.user_left
 *
 *
 * The Session User Left event is triggered every time a user (including host and co-host) leaves a session.
 *
 * ## Prerequisites
 * Event Subscriptions must be enabled for your [Marketplace app](https://marketplace.zoom.us/user/build) with the following configurations:
 *
 * * A valid Event Notification Endpoint URL.
 * * Session User Left subscription enabled under the Video SDK event.
 *
 *
 *
 * **Event type**: `session.user_left`
 *
 */
export type SessionUserLeftWebhookPayload = {
    /**
     * The event's name.
     */
    event: 'session.user_left';
    /**
     * A timestamp, in milliseconds since epoch, at which the event occurred.
     */
    event_ts: number;
    payload: {
        /**
         * The Video SDK account ID.
         */
        account_id: string;
        /**
         * Information about the session. This object only returns updated properties.
         */
        object: {
            /**
             * The session ID.
             */
            id: string;
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key?: string;
            /**
             * Information about the user.
             */
            user: {
                /**
                 * The user's unique ID. This value is assigned to the user upon joining a session and is only valid for that session.
                 */
                id: string;
                /**
                 * The user's username.
                 */
                name: string;
                /**
                 * The time at which the user left the session.
                 */
                leave_time: string;
                /**
                 * The reason why the user left the session, where $name is the participant's username:
                 * * $name left the session.
                 * * $name got disconnected from the session.
                 * * Host ended the session.
                 * * Host closed the session.
                 * * Host started a new session.
                 * * Network connection error.
                 * * Host did not join.
                 * * Exceeded free session minutes limit.
                 * * Removed by host.
                 * * Unknown reason.
                 * * Leave waiting room.
                 * * Removed by host from waiting room.
                 */
                leave_reason?: string;
                /**
                 * Another identifier for the user. Can be a number or characters.
                 */
                user_key?: string;
                /**
                 * Phone number of participant joined via PSTN.
                 */
                phone_number?: string;
                /**
                 * The participant's UUID. This value is assigned to a participant upon joining a session and is only valid for the session's duration.
                 */
                participant_uuid: string;
            };
        };
    };
};

export type SessionUserLeftWebhookRequest = {
    body: SessionUserLeftWebhookPayload;
    key: 'session.user_left';
    path?: never;
    query?: never;
};

/**
 * # session.sharing_started
 *
 *
 * The Session Sharing Started event is triggered every time a user starts sharing the screen during a session.
 *
 * ## Prerequisites
 * Event Subscriptions must be enabled for your [Marketplace app](https://marketplace.zoom.us/user/build) with the following configurations:
 *
 * * A valid Event Notification Endpoint URL.
 * * **Session Sharing Started** subscription enabled under the **Video SDK** event.
 *
 * The tabs below display the complete schema, payload with data types, and an example of the `session.sharing_started` event notification:
 *
 *
 *
 * **Event type**: `session.sharing_started`
 *
 */
export type SessionSharingStartedWebhookPayload = {
    /**
     * The event's name.
     */
    event: 'session.sharing_started';
    /**
     * A timestamp, in milliseconds since epoch, at which the event occurred.
     */
    event_ts: number;
    payload: {
        /**
         * The Video SDK account ID.
         */
        account_id: string;
        /**
         * Information about the session. This object only returns updated properties.
         */
        object: {
            /**
             * The session ID.
             */
            id: string;
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key?: string;
            /**
             * Information about the user.
             */
            user: {
                /**
                 * The user's unique ID. This value is assigned to the user upon joining a session and is only valid for that session.
                 */
                id: string;
                /**
                 * The user's username.
                 */
                name: string;
                /**
                 * Another identifier for the user. Can be a number or characters.
                 */
                user_key?: string;
                /**
                 * Information about the session's screen sharing.
                 */
                sharing_details: {
                    /**
                     * The type of shared content:
                     * * application — An application. For example, a web browser.
                     * * whiteboard — The Zoom [whiteboard](https://support.zoom.us/hc/en-us/articles/205677665-Sharing-a-whiteboard).
                     * * desktop — A user's desktop.
                     * * unknown — An unrecognized application, such as a third party app.
                     */
                    content: 'application' | 'whiteboard' | 'desktop' | 'unknown';
                    /**
                     * The session's screen sharing date and time.
                     */
                    date_time: string;
                };
            };
        };
    };
};

export type SessionSharingStartedWebhookRequest = {
    body: SessionSharingStartedWebhookPayload;
    key: 'session.sharing_started';
    path?: never;
    query?: never;
};

/**
 * # session.user_phone_callout_canceled
 * The **Invited party's phone (call out) canceled** event is triggered every time the inviter cancels the call out when they were invited to join a session through phone (call out). Video SDK call out operates in a similar manner as [Zoom meeting call out](https://support.zoom.com/hc/article?id=zm_kb&sysparm_article=KB0062038).
 *
 * ## Prerequisites
 *
 * * **Event Subscriptions** must be enabled for your app with the following configurations:
 * * A valid **Event Notification Endpoint URL**.
 * * The **Invited party's phone (call out) canceled** subscription enabled under the **Session** event.
 *
 *
 * **Event type**: `session.user_phone_callout_canceled`
 *
 */
export type SessionUserPhoneCalloutCanceledWebhookPayload = {
    /**
     * The name of the event.
     */
    event: string;
    /**
     * A timestamp at which the event occurred.
     */
    event_ts: number;
    payload: {
        /**
         * The account ID of the session host.
         */
        account_id: string;
        /**
         * Information about the session.
         */
        object: {
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key: string;
            /**
             * Another identifier for the inviter. Can be a number or characters.
             */
            user_key: string;
            /**
             * Information about the invited participant.
             */
            participant: {
                /**
                 * The user's name to display in the session.
                 */
                invitee_name: string;
                /**
                 * The user's phone number.
                 */
                phone_number: number;
                /**
                 * The number used to call out to the invited user.
                 */
                from_number: number;
            };
        };
    };
};

export type SessionUserPhoneCalloutCanceledWebhookRequest = {
    body: SessionUserPhoneCalloutCanceledWebhookPayload;
    key: 'session.user_phone_callout_canceled';
    path?: never;
    query?: never;
};

/**
 * # session.recording_transcript_completed
 * ---
 *
 * Event: `session.recording_transcript_completed`
 *
 * ## Event description
 *
 * The **Session recording transcript completed** event is triggered every time the transcript of the recording of a session becomes available to view or download.
 *
 * Only a session host or co-host can start, pause, resume, or stop a cloud recording. A recording is considered complete **after** the host or co-host ends the session. See [Enable cloud recording](https://developers.zoom.us/docs/video-sdk/account/#enable-cloud-recording) for details.
 *
 * ## Prerequisites
 *
 * * Cloud Recording must be enabled on the Video SDK account.
 * * Event Subscriptions must be enabled for your app with the following configurations:
 * * A valid Event Notification Endpoint URL.
 * * Session recording transcript completed subscription enabled under the Recording event.
 *
 * The tabs below display the complete schema, payload with data types, and an example of the `session.recording_transcript_completed` event notification:
 *
 *
 *
 * **Event type**: `session.recording_transcript_completed`
 *
 */
export type SessionRecordingTranscriptCompletedWebhookPayload = {
    /**
     * The event's name.
     */
    event: 'session.recording_transcript_completed';
    /**
     * A timestamp, in milliseconds since epoch, at which the event occurred.
     */
    event_ts: number;
    /**
     * A generated token used to download the recording. The download token only lasts for 24 hours after its creation and you can only download the file within 24 hours of receiving the event notification. You can either pass the download_token as a Bearer token in the Authorization header of your HTTP request (recommended) or include it as a query parameter. See the following for examples.
     *
     * **Using an Authorization header (Recommended)**
     *
     *
     * curl --request GET \
     * --url {download_url} \
     * --header 'authorization: Bearer {download_token} \
     * --header 'content-type: application/json'
     *
     *
     * **Using a query parameter**
     *
     *
     * {download_url}/?access_token={download_token}
     *
     *
     * For example: https://zoom.us/recording/download/123456?access_token=abcdefgh
     */
    download_token: string;
    payload: {
        /**
         * The Video SDK account ID.
         */
        account_id: string;
        /**
         * Information about the session. This object only returns updated properties.
         */
        object: {
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key: string;
            /**
             * The time at which the session started.
             */
            start_time: string;
            /**
             * The user's timezone.
             */
            timezone: string;
            /**
             * Recording file List
             * List of recording file.
             */
            recording_files: Array<{
                /**
                 * The recording file ID. Included in the response of general query.
                 */
                id?: string;
                /**
                 * The recording start time.
                 */
                recording_start?: string;
                /**
                 * The recording end time. Response in general query.
                 */
                recording_end?: string;
                /**
                 * Name of the file.
                 */
                file_name?: string;
                /**
                 * The file path to the On-Premise account recording.
                 *
                 * **Note:** This API only returns this field for [Zoom On-Premise accounts](https://support.zoom.us/hc/en-us/articles/360034064852-Zoom-On-Premise-Deployment). It does **not** return the download_url field.
                 */
                file_path?: string;
                /**
                 * The recording file type. The value of this field could be one of the following:<br>
                 * MP4: Video file of the recording.<br>M4A Audio-only file of the recording.<br>TIMELINE: Timestamp file of the recording in JSON file format. To get a timeline file, the "Add a timestamp to the recording" setting must be enabled in the [recording settings](https://support.zoom.us/hc/en-us/articles/360060316092). The time will display in the host's timezone, set on their Zoom profile.
                 * <br> TRANSCRIPT: Transcription file of the recording in VTT format.<br> CHAT: A TXT file containing in-session chat messages that were sent during the session.<br>CC: File containing closed captions of the recording in VTT file format.<br>CSV: File containing polling data in csv format.
                 *
                 * <br>
                 *
                 * A recording file object with file type of either CC or TIMELINE **does not have** the following properties:<br>
                 * id, status, file_size, recording_type.
                 */
                file_type?: 'MP4' | 'M4A' | 'CHAT' | 'TRANSCRIPT' | 'CSV' | 'CC' | 'TB' | 'CHAT_MESSAGE' | 'TIMELINE';
                /**
                 * The recording file size.
                 */
                file_size?: number;
                /**
                 * The archived file's file extension.
                 */
                file_extension?: 'MP4' | 'M4A' | 'TXT' | 'VTT' | 'CSV' | 'JSON' | 'JPG';
                /**
                 * The URL at which to download the the recording.
                 *
                 * To access a private or password-protected cloud recording of a user in your account, use your [Video SDK API JWT](https://marketplace.zoom.us/docs/guides/build/video-sdk-app/#video-sdk-and-api-credentials). You can either pass the generated JWT as a Bearer token in the Authorization header of your HTTP request (recommended) or include it as a query parameter at the end of the URL. See the following for examples.
                 *
                 * **Using an Authorization header (Recommended)**
                 *
                 *
                 * curl --request GET \
                 * --url {download_url} \
                 * --header 'authorization: Bearer {JWT} \
                 * --header 'content-type: application/json'
                 *
                 *
                 * **Using a query parameter**
                 *
                 *
                 * {download_url}/?access_token={download_token}
                 *
                 *
                 * For example: https://{base-domain}/recording/download/{path-to-file-download}?access_token={JWT}.
                 */
                download_url?: string;
                /**
                 * The recording status.
                 */
                status?: 'completed';
                /**
                 * The recording type. The value of this field can be one of the following:<br>shared_screen_with_speaker_view(CC)<br>shared_screen_with_speaker_view<br>shared_screen_with_gallery_view<br>speaker_view<br>gallery_view<br>shared_screen<br>audio_only<br>audio_transcript<br>chat_file<br>active_speaker<br>poll<br>timeline<br>closed_caption
                 */
                recording_type?: 'shared_screen_with_speaker_view(CC)' | 'shared_screen_with_speaker_view' | 'shared_screen_with_gallery_view' | 'gallery_view' | 'shared_screen' | 'audio_only' | 'audio_transcript' | 'chat_file' | 'active_speaker' | 'host_video' | 'audio_only_each_participant' | 'cc_transcript' | 'closed_caption' | 'poll' | 'timeline' | 'thumbnail' | 'chat_message';
            }>;
        };
    };
};

export type SessionRecordingTranscriptCompletedWebhookRequest = {
    body: SessionRecordingTranscriptCompletedWebhookPayload;
    key: 'session.recording_transcript_completed';
    path?: never;
    query?: never;
};

/**
 * # session.recording_deleted
 * ---
 *
 * Event: `session.recording_deleted`
 *
 * ## Event description
 *
 * The **Session recording permanently deleted** event is triggered every time one of your app users or account users permanently deletes a cloud recording.
 *
 * When a user initially deletes a recording, it is sent to the trash. At this stage, the recording can still be recovered for up to 30 days after deletion. To permanently delete a recording, users must delete it from the trash. Users can permanently delete a recording using:
 *
 * * The [Delete session's recording API](https://developers.zoom.us/docs/api/rest/reference/video-sdk/methods/#operation/recordingDelete) **with the delete query parameter** or
 * * The Zoom web portal. See [Video SDK account](https://developers.zoom.us/docs/video-sdk/account/) for details.
 *
 * ## Prerequisites
 *
 * * Cloud Recording must be enabled on the Video SDK account.
 * * Event Subscriptions must be enabled for your app with the following configurations:
 * * A valid Event Notification Endpoint URL.
 * * "**Session recording permanently deleted**" subscription enabled under the **Recording** event.
 *
 * The tabs below display the complete schema, payload with data types, and an example of the `session.recording_deleted` event notification:
 *
 *
 *
 * **Event type**: `session.recording_deleted`
 *
 */
export type SessionRecordingDeletedWebhookPayload = {
    /**
     * The event's name.
     */
    event: 'session.recording_deleted';
    /**
     * A timestamp, in milliseconds since epoch, at which the event occurred.
     */
    event_ts: number;
    payload: {
        /**
         * The Video SDK account ID.
         */
        account_id: string;
        /**
         * The email address of the user who deleted the recording.
         */
        operator: string;
        /**
         * The user ID of the user who deleted the recording.
         */
        operator_id: string;
        /**
         * Information about the session. This object only returns updated properties.
         */
        object: {
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key: string;
            /**
             * The time at which the session started.
             */
            start_time: string;
            /**
             * The user's timezone.
             */
            timezone: string;
        };
    };
};

export type SessionRecordingDeletedWebhookRequest = {
    body: SessionRecordingDeletedWebhookPayload;
    key: 'session.recording_deleted';
    path?: never;
    query?: never;
};

/**
 * # session.user_room_system_callout_failed
 *
 * The **Session invitation through phone (call out) via Zoom room failed** event is triggered every time an invitation to [join a session through phone (call out) from a Zoom room](https://support.zoom.us/hc/en-us/articles/205369035) fails.
 *
 * ## Prerequisites
 *
 * * **Event Subscriptions** must be enabled for your app with the following configurations:
 * * A valid **Event Notification Endpoint URL**.
 * * The **Session invitation through phone (call out) via Zoom room failed** subscription enabled under the **Session** event.
 *
 *
 *
 * **Event type**: `session.user_room_system_callout_failed`
 *
 */
export type SessionUserRoomSystemCalloutFailedWebhookPayload = {
    /**
     * The name of the event.
     */
    event: string;
    /**
     * A timestamp at which the event occurred.
     */
    event_ts: number;
    payload: {
        /**
         * The account ID of the session host.
         */
        account_id: string;
        /**
         * Information about the session.
         */
        object: {
            /**
             * The session ID.
             * @deprecated
             */
            id?: number;
            /**
             * The session's universally unique identifier (UUID). Each session instance generates a session UUID.
             * @deprecated
             */
            uuid?: string;
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The user ID of the session host.
             */
            host_id: string;
            /**
             * The request unique identifier (UUID).
             */
            message_id: string;
            /**
             * The user name of the event's trigger.
             */
            inviter_name: string;
            /**
             * reason type for failure:
             * * 1 — Encryption_Fail.
             * * 2 — Disconnected_By_Remote.
             * * 3 — Retry.
             * * 4 — Bad_Seq.
             * * 5 — Call_Limit.
             * * 6 — Not_Registered.
             * * 7 — Timeout.
             * * 8 — Bad_Addr.
             * * 9 — Unreachable
             * * 10 — Disconnect_By_Local
             * * 11 — Server_Internal_Error
             * * 12 — Exceed_Free_Port
             * * 13 — Connect_Error
             * * 14 — Proxy_Connect_Error
             * * 0 — Other_Failed_Reason.
             */
            reason_type: 0 | 1 | 2 | 3 | 4 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14;
            /**
             * Information about the invited participant.
             */
            participant: {
                /**
                 * The type of call out. Use a value of h323 or sip.
                 */
                call_type: string;
                /**
                 * The user's device IP address.
                 */
                device_ip: string;
                [key: string]: unknown | string;
            };
        };
    };
};

export type SessionUserRoomSystemCalloutFailedWebhookRequest = {
    body: SessionUserRoomSystemCalloutFailedWebhookPayload;
    key: 'session.user_room_system_callout_failed';
    path?: never;
    query?: never;
};

/**
 * # session.recording_completed
 * ---
 *
 * Event: `session.recording_completed`
 *
 * ## Event description
 *
 * The **Session recording completed** event is triggered every time a recording of a session becomes available to view and/or download.
 *
 * Only a session host or co-host can start, pause, resume, or stop a cloud recording. A recording is considered complete **after** the host or co-host ends the session. See [Enable cloud recording](https://developers.zoom.us/docs/video-sdk/account/#enable-cloud-recording) for details.
 *
 * ## Prerequisites
 *
 * * Cloud Recording must be enabled on the Video SDK account.
 * * Event Subscriptions must be enabled for your app with the following configurations:
 * * A valid Event Notification Endpoint URL.
 * * Session recording completed subscription enabled under the Recording event.
 *
 * The tabs below display the complete schema, payload with data types, and an example of the `session.recording_completed` event notification:
 *
 *
 *
 * **Event type**: `session.recording_completed`
 *
 */
export type SessionRecordingCompletedWebhookPayload = {
    /**
     * The event's name.
     */
    event: 'session.recording_completed';
    /**
     * A timestamp, in milliseconds since epoch, at which the event occurred.
     */
    event_ts: number;
    /**
     * A generated token used to download the recording. The download token only lasts for 24 hours after its creation and you can only download the file within 24 hours of receiving the event notification. Pass the download_token as a Bearer token in the Authorization header of your HTTP request. For example:
     *
     *
     * curl --request GET \
     * --url {download_url} \
     * --header 'authorization: Bearer {download_token} \
     * --header 'content-type: application/json'
     *
     */
    download_token: string;
    payload: {
        /**
         * The Video SDK account ID.
         */
        account_id: string;
        /**
         * Information about the session. This object only returns updated properties.
         */
        object: {
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key: string;
            /**
             * The time at which the session started.
             */
            start_time: string;
            /**
             * The user's timezone.
             */
            timezone: string;
            /**
             * Recording file List
             * List of recording file.
             */
            recording_files: Array<{
                /**
                 * The recording file ID. Included in the response of general query.
                 */
                id?: string;
                /**
                 * The recording start time.
                 */
                recording_start?: string;
                /**
                 * The recording end time. Response in general query.
                 */
                recording_end?: string;
                /**
                 * Name of the file.
                 */
                file_name?: string;
                /**
                 * The file path to the On-Premise account recording.
                 *
                 * **Note:** This API only returns this field for [Zoom On-Premise accounts](https://support.zoom.us/hc/en-us/articles/360034064852-Zoom-On-Premise-Deployment). It does **not** return the download_url field.
                 */
                file_path?: string;
                /**
                 * The recording file type. The value of this field could be one of the following:<br>
                 * MP4: Video file of the recording.<br>M4A Audio-only file of the recording.<br>TIMELINE: Timestamp file of the recording in JSON file format. To get a timeline file, the "Add a timestamp to the recording" setting must be enabled in the [recording settings](https://support.zoom.us/hc/en-us/articles/360060316092). The time will display in the host's timezone, set on their Zoom profile.
                 * <br> TRANSCRIPT: Transcription file of the recording in VTT format.<br> CHAT: A TXT file containing in-session chat messages that were sent during the session.<br>CC: File containing closed captions of the recording in VTT file format.<br>CSV: File containing polling data in csv format.
                 *
                 * <br>
                 *
                 * A recording file object with file type of either CC or TIMELINE **does not have** the following properties:<br>
                 * id, status, file_size, recording_type.
                 */
                file_type?: 'MP4' | 'M4A' | 'CHAT' | 'TRANSCRIPT' | 'CSV' | 'CC' | 'TB' | 'CHAT_MESSAGE';
                /**
                 * The recording file size.
                 */
                file_size?: number;
                /**
                 * The archived file's file extension.
                 */
                file_extension?: 'MP4' | 'M4A' | 'TXT' | 'VTT' | 'CSV' | 'JSON' | 'JPG';
                /**
                 * The URL at which to download the the recording.
                 *
                 * To access a private or password-protected cloud recording of a user in your account, use your [Video SDK API JWT](https://marketplace.zoom.us/docs/guides/build/video-sdk-app/#video-sdk-and-api-credentials). Pass the generated JWT as a Bearer token in the Authorization header of your HTTP request. For example:
                 *
                 *
                 * curl --request GET \
                 * --url {download_url} \
                 * --header 'authorization: Bearer {JWT} \
                 * --header 'content-type: application/json'
                 *
                 */
                download_url?: string;
                /**
                 * The recording status.
                 */
                status?: 'completed';
                /**
                 * The recording type. The value of this field can be one of the following:<br>shared_screen_with_speaker_view(CC)<br>shared_screen_with_speaker_view<br>shared_screen_with_gallery_view<br>speaker_view<br>gallery_view<br>shared_screen<br>audio_only<br>audio_transcript<br>chat_file<br>active_speaker<br>poll<br>timeline<br>closed_caption
                 */
                recording_type?: 'shared_screen_with_speaker_view(CC)' | 'shared_screen_with_speaker_view' | 'shared_screen_with_gallery_view' | 'gallery_view' | 'shared_screen' | 'audio_only' | 'audio_transcript' | 'chat_file' | 'active_speaker' | 'host_video' | 'audio_only_each_participant' | 'cc_transcript' | 'closed_caption' | 'poll' | 'timeline' | 'thumbnail' | 'chat_message';
            }>;
            /**
             * Recording file List
             * List of recording file.
             */
            participant_audio_files?: Array<{
                /**
                 * The recording file ID. Included in the response of general query.
                 */
                id?: string;
                /**
                 * The recording start time.
                 */
                recording_start?: string;
                /**
                 * The recording end time. Response in general query.
                 */
                recording_end?: string;
                /**
                 * Name of the file.
                 */
                file_name?: string;
                /**
                 * The file path to the On-Premise account recording.
                 *
                 * **Note:** This API only returns this field for [Zoom On-Premise accounts](https://support.zoom.us/hc/en-us/articles/360034064852-Zoom-On-Premise-Deployment). It does **not** return the download_url field.
                 */
                file_path?: string;
                /**
                 * The recording file type. The value of this field could be one of the following:<br>
                 * MP4: Video file of the recording.<br>M4A Audio-only file of the recording.<br>TIMELINE: Timestamp file of the recording in JSON file format. To get a timeline file, the "Add a timestamp to the recording" setting must be enabled in the [recording settings](https://support.zoom.us/hc/en-us/articles/360060316092). The time will display in the host's timezone, set on their Zoom profile.
                 * <br> TRANSCRIPT: Transcription file of the recording in VTT format.<br> CHAT: A TXT file containing in-session chat messages that were sent during the session.<br>CC: File containing closed captions of the recording in VTT file format.<br>CSV: File containing polling data in csv format.
                 *
                 * <br>
                 *
                 * A recording file object with file type of either CC or TIMELINE **does not have** the following properties:<br>
                 * id, status, file_size, recording_type.
                 */
                file_type?: 'MP4' | 'M4A' | 'CHAT' | 'TRANSCRIPT' | 'CSV' | 'CC' | 'TB' | 'CHAT_MESSAGE';
                /**
                 * The recording file size.
                 */
                file_size?: number;
                /**
                 * The archived file's file extension.
                 */
                file_extension?: 'MP4' | 'M4A' | 'TXT' | 'VTT' | 'CSV' | 'JSON' | 'JPG';
                /**
                 * The URL at which to download the the recording.
                 *
                 * To access a private or password-protected cloud recording of a user in your account, use your [Video SDK API JWT](https://marketplace.zoom.us/docs/guides/build/video-sdk-app/#video-sdk-and-api-credentials). Pass the generated JWT as a Bearer token in the Authorization header of your HTTP request. For example:
                 *
                 *
                 * curl --request GET \
                 * --url {download_url} \
                 * --header 'authorization: Bearer {JWT} \
                 * --header 'content-type: application/json'
                 *
                 */
                download_url?: string;
                /**
                 * The recording status.
                 */
                status?: 'completed';
                /**
                 * The recording type. The value of this field can be one of the following:<br>shared_screen_with_speaker_view(CC)<br>shared_screen_with_speaker_view<br>shared_screen_with_gallery_view<br>speaker_view<br>gallery_view<br>shared_screen<br>audio_only<br>audio_transcript<br>chat_file<br>active_speaker<br>poll<br>timeline<br>closed_caption
                 */
                recording_type?: 'shared_screen_with_speaker_view(CC)' | 'shared_screen_with_speaker_view' | 'shared_screen_with_gallery_view' | 'gallery_view' | 'shared_screen' | 'audio_only' | 'audio_transcript' | 'chat_file' | 'active_speaker' | 'host_video' | 'audio_only_each_participant' | 'cc_transcript' | 'closed_caption' | 'poll' | 'timeline' | 'thumbnail' | 'chat_message';
                /**
                 * The participant's session user ID. This value is assigned to a participant upon joining a session and is only valid for the duration of the session.
                 */
                user_id?: string;
                /**
                 * The participant's SDK identifier. Set with the user_identity key in the Video SDK JWT payload. This value can be alphanumeric, up to a maximum length of 35 characters.
                 */
                user_key?: string;
            }>;
            /**
             * Recording file List
             * List of recording file.
             */
            participant_video_files?: Array<{
                /**
                 * The recording file ID. Included in the response of general query.
                 */
                id?: string;
                /**
                 * The recording start time.
                 */
                recording_start?: string;
                /**
                 * The recording end time. Response in general query.
                 */
                recording_end?: string;
                /**
                 * Name of the file.
                 */
                file_name?: string;
                /**
                 * The file path to the On-Premise account recording.
                 *
                 * **Note:** This API only returns this field for [Zoom On-Premise accounts](https://support.zoom.us/hc/en-us/articles/360034064852-Zoom-On-Premise-Deployment). It does **not** return the download_url field.
                 */
                file_path?: string;
                /**
                 * The recording file type. The value of this field could be one of the following:<br>
                 * MP4: Video file of the recording.
                 */
                file_type?: 'MP4';
                /**
                 * The recording file size.
                 */
                file_size?: number;
                /**
                 * The archived file's file extension.
                 */
                file_extension?: 'MP4';
                /**
                 * The URL at which to download the the recording.
                 *
                 * To access a private or password-protected cloud recording of a user in your account, use your [Video SDK API JWT](https://marketplace.zoom.us/docs/guides/build/video-sdk-app/#video-sdk-and-api-credentials). Pass the generated JWT as a Bearer token in the Authorization header of your HTTP request. For example:
                 *
                 *
                 * curl --request GET \
                 * --url {download_url} \
                 * --header 'authorization: Bearer {JWT} \
                 * --header 'content-type: application/json'
                 *
                 */
                download_url?: string;
                /**
                 * The recording status.
                 */
                status?: 'completed';
                /**
                 * The recording type. The value of this field can be one of the following:<br>shared_screen_with_speaker_view(CC)<br>shared_screen_with_speaker_view<br>shared_screen_with_gallery_view<br>speaker_view<br>gallery_view<br>shared_screen<br>audio_only<br>audio_transcript<br>chat_file<br>active_speaker<br>poll<br>timeline<br>closed_caption
                 */
                recording_type?: 'individual_user' | 'individual_shared_screen';
                /**
                 * The participant's session user ID. This value is assigned to a participant upon joining a session and is only valid for the duration of the session.
                 */
                user_id?: string;
                /**
                 * The participant's SDK identifier. Set with the user_identity key in the Video SDK JWT payload. This value can be alphanumeric, up to a maximum length of 35 characters.
                 */
                user_key?: string;
            }>;
        };
    };
};

export type SessionRecordingCompletedWebhookRequest = {
    body: SessionRecordingCompletedWebhookPayload;
    key: 'session.recording_completed';
    path?: never;
    query?: never;
};

/**
 * # session.recording_transcript_failed
 * ---
 *
 * Event: `session.recording_transcript_failed`
 *
 * ## Event description
 *
 * The **Session recording transcript failed** event is triggered every time the transcript of the recording of a session generated failed.
 *
 * Only a session host or co-host can start, pause, resume, or stop a cloud recording. A recording is considered complete **after** the host or co-host ends the session. See [Enable cloud recording](https://developers.zoom.us/docs/video-sdk/account/#enable-cloud-recording) for details.
 *
 * ## Prerequisites
 *
 * * Enable Cloud Recording on the Video SDK account.
 * * Enable Event Subscriptions for your app with the following configurations:
 * * A valid Event Notification Endpoint URL.
 * * Enable session recording transcript completed subscription under the Recording event.
 *
 * The tabs below display the complete schema, payload with data types, and an example of the `session.recording_transcript_completed` event notification:
 *
 *
 *
 * **Event type**: `session.recording_transcript_failed`
 *
 */
export type SessionRecordingTranscriptFailedWebhookPayload = {
    /**
     * The event's name.
     */
    event: 'session.recording_transcript_failed';
    /**
     * A timestamp, in milliseconds since epoch, when the event occurred.
     */
    event_ts: number;
    payload: {
        /**
         * The Video SDK account ID.
         */
        account_id: string;
        /**
         * Information about the session. This object only returns updated properties.
         */
        object: {
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key: string;
            /**
             * The time when the session started.
             */
            start_time: string;
            /**
             * The user's timezone.
             */
            timezone: string;
        };
    };
};

export type SessionRecordingTranscriptFailedWebhookRequest = {
    body: SessionRecordingTranscriptFailedWebhookPayload;
    key: 'session.recording_transcript_failed';
    path?: never;
    query?: never;
};

/**
 * # session.recording_trashed
 * ---
 *
 * Event: `session.recording_trashed`
 *
 * ## Event description
 *
 * The **Session recording deleted to trash** event is triggered every time one of your app users or account users temporarily delete a cloud recording.
 *
 * When a user initially deletes a recording, it is deleted to the trash. Recordings deleted to the trash can be recovered up to 30 days after deletion. Users can move a recording to the trash using:
 *
 * * The [Delete session's recording](https://developers.zoom.us/docs/api/rest/reference/video-sdk/methods/#operation/recordingDelete) API **with the trash query parameter** or
 * * The Zoom web portal. See [Video SDK account](https://developers.zoom.us/docs/video-sdk/account/) for details.
 *
 * ## Prerequisites
 *
 * * Cloud Recording must be enabled on the Video SDK account.
 * * Event Subscriptions must be enabled for your app with the following configurations:
 * * A valid Event Notification Endpoint URL.
 * * **Session recording deleted to trash** subscription enabled under the **Recording** event.
 *
 * The tabs below display the complete schema, payload with data types, and an example of the `session.recording_trashed` event notification:
 *
 *
 *
 * **Event type**: `session.recording_trashed`
 *
 */
export type SessionRecordingTrashedWebhookPayload = {
    /**
     * The event's name.
     */
    event: 'session.recording_trashed';
    /**
     * A timestamp, in milliseconds since epoch, at which the event occurred.
     */
    event_ts: number;
    payload: {
        /**
         * The Video SDK account ID.
         */
        account_id: string;
        /**
         * The email address of the user who deleted the recording.
         */
        operator: string;
        /**
         * The user ID of the user who deleted the recording.
         */
        operator_id: string;
        /**
         * Information about the session. This object only returns updated properties.
         */
        object: {
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key: string;
            /**
             * The time at which the session started.
             */
            start_time: string;
            /**
             * The user's timezone.
             */
            timezone: string;
        };
    };
};

export type SessionRecordingTrashedWebhookRequest = {
    body: SessionRecordingTrashedWebhookPayload;
    key: 'session.recording_trashed';
    path?: never;
    query?: never;
};

/**
 * # session.user_joined
 * ---
 *
 *
 * The Session User Joined event is triggered every time a user (including host and co-host) joins a session.
 *
 * ## Prerequisites
 * Event Subscriptions must be enabled for your [Marketplace app](https://marketplace.zoom.us/user/build) with the following configurations:
 *
 * * A valid Event Notification Endpoint URL.
 * * Session User Joined subscription enabled under the Video SDK event.
 *
 * The tabs below display the complete schema, payload with data types, and an example of the `session.user_joined` event notification:
 *
 *
 *
 * **Event type**: `session.user_joined`
 *
 */
export type SessionUserJoinedWebhookPayload = {
    /**
     * The event's name.
     */
    event: 'session.user_joined';
    /**
     * A timestamp, in milliseconds since epoch, at which the event occurred.
     */
    event_ts: number;
    payload: {
        /**
         * The Video SDK account ID.
         */
        account_id: string;
        /**
         * Information about the session. This object only returns updated properties.
         */
        object: {
            /**
             * The session ID.
             */
            id: string;
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key?: string;
            /**
             * Information about the user.
             */
            user: {
                /**
                 * The user's unique ID. This value is assigned to the user upon joining a session and is only valid for that session.
                 */
                id: string;
                /**
                 * The user's username.
                 */
                name: string;
                /**
                 * The time at which the user joined the session.
                 */
                join_time: string;
                /**
                 * Another identifier for the user. Can be a number or characters.
                 */
                user_key?: string;
                /**
                 * Phone number of participant joined via PSTN.
                 */
                phone_number?: string;
                /**
                 * The participant's UUID. This value is assigned to a participant upon joining a session and is only valid for the session's duration.
                 */
                participant_uuid: string;
            };
        };
    };
};

export type SessionUserJoinedWebhookRequest = {
    body: SessionUserJoinedWebhookPayload;
    key: 'session.user_joined';
    path?: never;
    query?: never;
};

/**
 * # session.stream_ingestion_started
 * Zoom triggers the **Session stream ingestion started** event every time a host starts sending an incoming live stream to a session. The session user can subscribe to it to see what's being streamed live into this session.
 *
 * ## Prerequisites
 *
 * * **Event Subscriptions** must be enabled for your app with the following configurations:
 * * A valid **Event Notification Endpoint URL**.
 * * The **Session stream ingestion started** subscription enabled under the **Video SDK** event.
 *
 *
 * **Event type**: `session.stream_ingestion_started`
 *
 */
export type SessionStreamIngestionStartedWebhookPayload = {
    /**
     * Event name.
     */
    event: 'session.stream_ingestion_started';
    /**
     * Timestamp (in milliseconds since epoch) when the event occurred. The value of this field is returned in long (int64) format.
     */
    event_ts: number;
    payload: {
        /**
         * The Video SDK account ID.
         */
        account_id: string;
        /**
         * Information about the session.
         */
        object: {
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key?: string;
            /**
             * Information about the stream ingestion.
             */
            stream_ingestion: {
                /**
                 * The stream ingestion ID.
                 */
                stream_id: string;
                /**
                 * The stream ingestion name.
                 */
                stream_name: string;
                /**
                 * The stream ingestion description.
                 */
                stream_description?: string;
                /**
                 * The stream ingestion key.
                 */
                stream_key: string;
                /**
                 * The stream URL.
                 */
                stream_url: string;
                /**
                 * The backup stream URL.
                 */
                backup_stream_url: string;
            };
        };
    };
};

export type SessionStreamIngestionStartedWebhookRequest = {
    body: SessionStreamIngestionStartedWebhookPayload;
    key: 'session.stream_ingestion_started';
    path?: never;
    query?: never;
};

/**
 * # session.stream_ingestion_connected
 * Zoom triggers the **Session stream ingestion connected** event every time live streaming software connects to the Zoom Video SDK session. This indicates that the Zoom streaming platform is receiving data from the streaming software, but the received Real-Time Messaging Protocol (RTMP) data is not sent to the session yet.
 *
 * ## Prerequisites
 *
 * * **Event Subscriptions** must be enabled for your app with the following configurations:
 * * A valid **Event Notification Endpoint URL**.
 * * The **Session stream ingestion connected** subscription enabled under the **Video SDK** event.
 *
 *
 * **Event type**: `session.stream_ingestion_connected`
 *
 */
export type SessionStreamIngestionConnectedWebhookPayload = {
    /**
     * Name of the event.
     */
    event: 'session.stream_ingestion_connected';
    /**
     * Timestamp (in milliseconds since epoch) when the event occurred. The value of this field is returned in long (int64) format.
     */
    event_ts: number;
    payload: {
        /**
         * The Video SDK account ID.
         */
        account_id: string;
        /**
         * Information about the session.
         */
        object: {
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key?: string;
            /**
             * Information about the stream ingestion.
             */
            stream_ingestion: {
                /**
                 * The stream ingestion ID.
                 */
                stream_id: string;
                /**
                 * The stream ingestion name.
                 */
                stream_name: string;
                /**
                 * The stream ingestion description.
                 */
                stream_description?: string;
                /**
                 * The stream ingestion key.
                 */
                stream_key: string;
                /**
                 * The stream URL.
                 */
                stream_url: string;
                /**
                 * The backup stream URL.
                 */
                backup_stream_url: string;
            };
        };
    };
};

export type SessionStreamIngestionConnectedWebhookRequest = {
    body: SessionStreamIngestionConnectedWebhookPayload;
    key: 'session.stream_ingestion_connected';
    path?: never;
    query?: never;
};

/**
 * # session.stream_ingestion_disconnected
 * Zoom triggers the **Session stream ingestion disconnected** event every time a Real-Time Messaging Protocol (RTMP) software program disconnects.
 *
 * ## Prerequisites
 *
 * * **Event Subscriptions** must be enabled for your app with the following configurations:
 * * A valid **Event Notification Endpoint URL**.
 * * The **Session stream ingestion disconnected** subscription enabled under the **Video SDK** event.
 *
 *
 * **Event type**: `session.stream_ingestion_disconnected`
 *
 */
export type SessionStreamIngestionDisconnectedWebhookPayload = {
    /**
     * Name of the event.
     */
    event: 'session.stream_ingestion_disconnected';
    /**
     * Timestamp (in milliseconds since epoch) when the event occurred. The value of this field is returned in long (int64) format.
     */
    event_ts: number;
    payload: {
        /**
         * The Video SDK account ID.
         */
        account_id: string;
        /**
         * Information about the session.
         */
        object: {
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key?: string;
            /**
             * Information about the stream ingestion.
             */
            stream_ingestion: {
                /**
                 * The stream ingestion ID.
                 */
                stream_id: string;
                /**
                 * The stream ingestion name.
                 */
                stream_name: string;
                /**
                 * The stream ingestion description.
                 */
                stream_description?: string;
                /**
                 * The stream ingestion key.
                 */
                stream_key: string;
                /**
                 * The stream URL.
                 */
                stream_url: string;
                /**
                 * The backup stream URL.
                 */
                backup_stream_url: string;
            };
        };
    };
};

export type SessionStreamIngestionDisconnectedWebhookRequest = {
    body: SessionStreamIngestionDisconnectedWebhookPayload;
    key: 'session.stream_ingestion_disconnected';
    path?: never;
    query?: never;
};

/**
 * # session.recording_recovered
 * ---
 *
 * Event: `session.recording_recovered`
 *
 * ## Event description
 *
 * The **Session recording recovered** event is triggered every time one of your app users or account users recover a recording from the trash.
 *
 * Zoom allows users to recover their cloud recordings from trash within 30 days of deletion. You can recover a deleted cloud recording with:
 *
 * * The tab in the Zoom web client. See [Video SDK recordings and reports](https://developers.zoom.us/docs/video-sdk/reports/) for details.
 * * The [Recover a single recording](https://developers.zoom.us/docs/api/rest/reference/video-sdk/methods/#operation/recordingStatusUpdateOne) or [Recover session's recordings](https://developers.zoom.us/docs/api/rest/reference/video-sdk/methods/#operation/recordingStatusUpdate) API.
 *
 * ## Prerequisites
 *
 * * Cloud Recording must be enabled on the Video SDK account.
 * * Event Subscriptions must be enabled for your app with the following configurations:
 * * A valid Event Notification Endpoint URL.
 * * "**Session recording recovered**" subscription enabled under the **Recording** event.
 *
 * The tabs below display the complete schema, payload with data types, and an example of the `session.recording_recovered` event notification:
 *
 *
 *
 * **Event type**: `session.recording_recovered`
 *
 */
export type SessionRecordingRecoveredWebhookPayload = {
    /**
     * The event's name.
     */
    event: 'session.recording_recovered';
    /**
     * A timestamp, in milliseconds since epoch, at which the event occurred.
     */
    event_ts: number;
    payload: {
        /**
         * The Video SDK account ID.
         */
        account_id: string;
        /**
         * The email address of the user who deleted the recording.
         */
        operator: string;
        /**
         * The user ID of the user who deleted the recording.
         */
        operator_id: string;
        /**
         * Information about the session. This object only returns updated properties.
         */
        object: {
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key: string;
            /**
             * The time at which the session started.
             */
            start_time: string;
            /**
             * The user's timezone.
             */
            timezone: string;
        };
    };
};

export type SessionRecordingRecoveredWebhookRequest = {
    body: SessionRecordingRecoveredWebhookPayload;
    key: 'session.recording_recovered';
    path?: never;
    query?: never;
};

/**
 * # session.user_phone_callout_missed
 *
 * The **Invited party missed a session invitation through phone (call out)** event is triggered every time an invitation to join a session through phone (call out) times out. Video SDK call out operates in a similar manner as [Zoom meeting call out](https://support.zoom.com/hc/article?id=zm_kb&sysparm_article=KB0062038).
 *
 * ## Prerequisites
 *
 * * **Event Subscriptions** must be enabled for your app with the following configurations:
 * * A valid **Event Notification Endpoint URL**.
 * * The **Invited party missed a session invitation through phone (call out)** subscription enabled under the **Session** event.
 *
 *
 *
 *
 * **Event type**: `session.user_phone_callout_missed`
 *
 */
export type SessionUserPhoneCalloutMissedWebhookPayload = {
    /**
     * The name of the event.
     */
    event: string;
    /**
     * A timestamp at which the event occurred.
     */
    event_ts: number;
    payload: {
        /**
         * The account ID of the session host.
         */
        account_id: string;
        /**
         * Information about the session.
         */
        object: {
            /**
             * The session ID.
             * @deprecated
             */
            id?: number;
            /**
             * The session's universally unique identifier (UUID). Each session instance generates a session UUID.
             * @deprecated
             */
            uuid?: string;
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key: string;
            /**
             * Another identifier for the inviter. Can be a number or characters.
             */
            user_key: string;
            /**
             * The user ID of the session host.
             */
            host_id: string;
            /**
             * Information about the invited user.
             */
            participant: {
                /**
                 * The user's name to display in the session.
                 */
                invitee_name: string;
                /**
                 * The user's phone number.
                 */
                phone_number: number;
                /**
                 * The number used to call out to the invited user.
                 */
                from_number: number;
            };
        };
    };
};

export type SessionUserPhoneCalloutMissedWebhookRequest = {
    body: SessionUserPhoneCalloutMissedWebhookPayload;
    key: 'session.user_phone_callout_missed';
    path?: never;
    query?: never;
};

/**
 * # session.user_phone_callout_rejected
 *
 * The **Invited party rejected a session invitation through phone (call out)** event is triggered every time a user rejects an invitation to join a session through phone (call out). Video SDK call out operates in a similar manner as [Zoom meeting call out](https://support.zoom.com/hc/article?id=zm_kb&sysparm_article=KB0062038).
 *
 * ## Prerequisites
 *
 * * **Event Subscriptions** must be enabled for your app with the following configurations:
 * * A valid **Event Notification Endpoint URL**.
 * * The **Invited party rejected a session invitation through phone (call out)** subscription enabled under the **Session** event.
 *
 *
 *
 *
 * **Event type**: `session.user_phone_callout_rejected`
 *
 */
export type SessionUserPhoneCalloutRejectedWebhookPayload = {
    /**
     * The name of the event.
     */
    event: string;
    /**
     * A timestamp at which the event occurred.
     */
    event_ts: number;
    payload: {
        /**
         * The account ID of the session host.
         */
        account_id: string;
        /**
         * Information about the session.
         */
        object: {
            /**
             * The session ID.
             * @deprecated
             */
            id?: number;
            /**
             * The session's universally unique identifier (UUID). Each session instance generates a session UUID.
             * @deprecated
             */
            uuid?: string;
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key: string;
            /**
             * Another identifier for the inviter. Can be a number or characters.
             */
            user_key: string;
            /**
             * The user ID of the session host.
             */
            host_id: string;
            /**
             * Information about the invited user.
             */
            participant: {
                /**
                 * The user's name to display in the session.
                 */
                invitee_name: string;
                /**
                 * The user's phone number.
                 */
                phone_number: number;
                /**
                 * The number used to call out to the invited user.
                 */
                from_number: number;
            };
        };
    };
};

export type SessionUserPhoneCalloutRejectedWebhookRequest = {
    body: SessionUserPhoneCalloutRejectedWebhookPayload;
    key: 'session.user_phone_callout_rejected';
    path?: never;
    query?: never;
};

/**
 * # session.user_room_system_callout_accepted
 *
 * The **Invited party answered a session invitation through phone (call out) via Zoom room** event is triggered every time a user [joins a session through phone (call out) from a Zoom room](https://support.zoom.us/hc/en-us/articles/205369035).
 *
 * ## Prerequisites
 *
 * * **Event Subscriptions** must be enabled for your app with the following configurations:
 * * A valid **Event Notification Endpoint URL**.
 * * The **Invited party answered a session invitation through phone (call out) via Zoom room** subscription enabled under the **Session** event.
 *
 *
 *
 * **Event type**: `session.user_room_system_callout_accepted`
 *
 */
export type SessionUserRoomSystemCalloutAcceptedWebhookPayload = {
    /**
     * The name of the event.
     */
    event: string;
    /**
     * A timestamp at which the event occurred.
     */
    event_ts: number;
    payload: {
        /**
         * The account ID of the session host.
         */
        account_id: string;
        /**
         * Information about the session.
         */
        object: {
            /**
             * The session ID.
             * @deprecated
             */
            id?: number;
            /**
             * The session's universally unique identifier (UUID). Each session instance generates a session UUID.
             * @deprecated
             */
            uuid?: string;
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The user ID of the session host.
             */
            host_id: string;
            /**
             * The request unique identifier (UUID).
             */
            message_id: string;
            /**
             * The user name of the event's trigger.
             */
            inviter_name: string;
            /**
             * Information about the invited participant.
             */
            participant: {
                /**
                 * The type of call out. Use a value of h323 or sip.
                 */
                call_type: string;
                /**
                 * The user's device IP address.
                 */
                device_ip: string;
                [key: string]: unknown | string;
            };
        };
    };
};

export type SessionUserRoomSystemCalloutAcceptedWebhookRequest = {
    body: SessionUserRoomSystemCalloutAcceptedWebhookPayload;
    key: 'session.user_room_system_callout_accepted';
    path?: never;
    query?: never;
};

/**
 * # session.recording_stopped
 * ---
 *
 * Event: `session.recording_stopped`
 *
 * ## Event description
 *
 * The **Session recording stopped** event is triggered every time a previously paused recording of a session is resumed.
 *
 * Only a session host or co-host can start, pause, resume, or stop a cloud recording. A recording is considered complete **after** the host or co-host ends the session. See [Enable cloud recording](https://developers.zoom.us/docs/video-sdk/account/#enable-cloud-recording) for details.
 *
 * ## Prerequisites
 *
 * * Cloud Recording must be enabled on the Video SDK account.
 * * Event Subscriptions must be enabled for your app with the following configurations:
 * * A valid Event Notification Endpoint URL.
 * * **Session recording stopped** subscription enabled under the **Recording** event.
 *
 * The tabs below display the complete schema, payload with data types, and an example of the `session.recording_stopped` event notification:
 *
 *
 *
 * **Event type**: `session.recording_stopped`
 *
 */
export type SessionRecordingStoppedWebhookPayload = {
    /**
     * The event's name.
     */
    event: 'session.recording_stopped';
    /**
     * A timestamp, in milliseconds since epoch, at which the event occurred.
     */
    event_ts: number;
    payload: {
        /**
         * The Video SDK account ID.
         */
        account_id: string;
        /**
         * Information about the session. This object only returns updated properties.
         */
        object: {
            /**
             * Unique session identifier. Each instance of the session will have its own session_id.
             */
            session_id: string;
            /**
             * Session name.
             */
            session_name: string;
            /**
             * The Video SDK custom session ID.
             */
            session_key: string;
            /**
             * The time at which the session started.
             */
            start_time: string;
            /**
             * The user's timezone.
             */
            timezone: string;
            recording_file: {
                /**
                 * The recording start time.
                 */
                recording_start?: string;
                /**
                 * The recording end time. Response in general query.
                 */
                recording_end?: string;
            };
        };
    };
};

export type SessionRecordingStoppedWebhookRequest = {
    body: SessionRecordingStoppedWebhookPayload;
    key: 'session.recording_stopped';
    path?: never;
    query?: never;
};

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};

export type Webhooks = SessionUserPhoneCalloutRingingWebhookRequest | SessionUserRoomSystemCalloutRingingWebhookRequest | SessionRecordingStartedWebhookRequest | SessionRecordingResumedWebhookRequest | SessionLiveStreamingStoppedWebhookRequest | SessionStreamIngestionStoppedWebhookRequest | SessionUserRoomSystemCalloutRejectedWebhookRequest | SessionAlertWebhookRequest | SessionSharingEndedWebhookRequest | SessionRecordingPausedWebhookRequest | SessionEndedWebhookRequest | SessionStartedWebhookRequest | SessionStreamIngestionUnbindWebhookRequest | SessionLiveStreamingStartedWebhookRequest | SessionUserRoomSystemCalloutMissedWebhookRequest | SessionUserPhoneCalloutAcceptedWebhookRequest | SessionUserLeftWebhookRequest | SessionSharingStartedWebhookRequest | SessionUserPhoneCalloutCanceledWebhookRequest | SessionRecordingTranscriptCompletedWebhookRequest | SessionRecordingDeletedWebhookRequest | SessionUserRoomSystemCalloutFailedWebhookRequest | SessionRecordingCompletedWebhookRequest | SessionRecordingTranscriptFailedWebhookRequest | SessionRecordingTrashedWebhookRequest | SessionUserJoinedWebhookRequest | SessionStreamIngestionStartedWebhookRequest | SessionStreamIngestionConnectedWebhookRequest | SessionStreamIngestionDisconnectedWebhookRequest | SessionRecordingRecoveredWebhookRequest | SessionUserPhoneCalloutMissedWebhookRequest | SessionUserPhoneCalloutRejectedWebhookRequest | SessionUserRoomSystemCalloutAcceptedWebhookRequest | SessionRecordingStoppedWebhookRequest;